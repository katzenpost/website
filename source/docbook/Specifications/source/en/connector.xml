<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?title?>
<?linkTitle "Connector design specification" ?>
<?url "docs/specs/connector.html" ?>
<?description "" ?>
<?draft false ?>
<?slug "" ?>
<?layout "" ?>
<?type "" ?>
<?weight 10 ?>

<!DOCTYPE article [
<!ENTITY % shared-content SYSTEM "../../../shared-content.ent">
%shared-content;
<!ENTITY % terms SYSTEM "../../../terms.ent">
%terms;
<!ENTITY % references SYSTEM "../../../references.ent">
%references;
]>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1" xml:id="client2">

    <info>
        <title xml:id="client2.title">Client connector design specification</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>David</firstname>
                    <surname>Stainton</surname>
                </personname>
            </author>
        </authorgroup>
        <abstract>
            <para>This document describes the design of the Katzenpost mix network client connector.
                In particular we discuss its multiplexing and privilege separation design elements
                as well as the protocol used by the connector library, which is incorporated into
                any application client that supports the connector.</para>
        </abstract>
    </info>
    <section xml:id="client2_introduction">
        <title xml:id="client2_introduction.title">1. Overview</title>
        <para> An appliance for Katzenpost client connections has several responsibilities at a
            minimum:</para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> compose Sphinx packets </para>
            </listitem>
            <listitem>
                <para> decrypt SURB replies </para>
            </listitem>
            <listitem>
                <para> send and receive Noise protocol messages </para>
            </listitem>
            <listitem>
                <para> keep up to date with the latest PKI document </para>
            </listitem>
        </itemizedlist>
        <para>The client connector is essentially a long running daemon process that listens on an
            abstract unix domain socket for incoming connector library connections. Many client
            applications can use the same connector daemon. Those connections are in a sense being
            multiplexed into the daemon’s single connection to the mix network.</para>
        <para>Therefore applications will be integrated with Katzenpost using the connector library
            which gives them the capability to talk with the connector daemon and in that way
            interact with the mix network. The library itself does not do any mixnet-related
            cryptography since that is already handled by the connector daemon. In particular, the
            PKI document is stripped by the daemon before it’s passed on to clients using the
            connector library. Likewise, the library doesn't decrypt SURB replies or compose Sphinx
            packets, with Noise, Sphinx, and PKI related cryptography being handled by the
            daemon.</para>
    </section>
    <section xml:id="thin-client-and-daemon-protocol">
        <title xml:id="thin-client-and-daemon-protocol.title">2. Connector library and daemon
            protocol</title>
        <para>Note that the connector daemon protocol uses abstract unix domain sockets in datagram
            packet mode. The socket is of type SOCK_SEQPACKET which is defined as:</para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    <emphasis role="strong">SOCK_SEQPACKET</emphasis> (since Linux 2.6.4), is a
                    connection-oriented socket that preserves message boundaries and delivers
                    messages in the order that they were sent. </para>
            </listitem>
        </itemizedlist>
        <para> In golang this is referred to by the <quote>unixpacket</quote> network string. </para>
        <section xml:id="client-socket-naming-convention">
            <title xml:id="client-socket-naming-convention.title">2.1 Client socket naming
                convention</title>
            <para>Clients using the connector library MUST randomize their abstract unix domain
                socket names. Otherwise, the static name will prevent multiplexing because the
                kernel requires that the connection be between uniquely nameed socket pairs. The
                &program_name; reference implementation of the connector library selects a socket
                name with four random hex digits appended to the end of the name like so: </para>
            <programlisting>@katzenpost_golang_thin_client_DEADBEEF</programlisting>
        </section>
        <section xml:id="daemon-socket-naming-convention">
            <title xml:id="daemon-socket-naming-convention.title">2.2 Daemon socket naming
                convention</title>
            <para>The connector daemon listens on an abstract unix domain socket with the following
                name: </para>
            <programlisting>@katzenpost</programlisting>
        </section>
        <section xml:id="protocol-messages">
            <title xml:id="protocol-messages.title">2.3 Protocol messages</title>
            <para>The protocol includes two message types, <literal>Response</literal> and
                    <literal>Request</literal>. We do not use prefix-length encoding for either
                because the socket type preserves message boundaries for us, permitting us to use
                pure CBOR encoding. </para>
            <para>The daemon sends the <literal>Response</literal> message, which is defined as
                follows in golang as a struct containing an app ID and one of four possible
                events.</para>
            <programlisting>type Response struct {
// AppID must be a unique identity for the client application
// that is receiving this Response.
AppID *[AppIDLength]byte `cbor:app_id`

ConnectionStatusEvent *ConnectionStatusEvent `cbor:connection_status_event`

NewPKIDocumentEvent *NewPKIDocumentEvent `cbor:new_pki_document_event`

MessageSentEvent *MessageSentEvent `cbor:message_sent_event`

MessageReplyEvent *MessageReplyEvent `cbor:message_reply_event`
}

type ConnectionStatusEvent struct {
IsConnected bool `cbor:is_connected`
Err error `cbor:err`
}

type NewPKIDocumentEvent struct {
Payload []byte `cbor:payload`
}

type MessageReplyEvent struct {
MessageID *[MessageIDLength]byte `cbor:message_id`
SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`
Payload []byte `cbor:payload`
Err error `cbor:err`
}

type MessageSentEvent struct {
MessageID *[MessageIDLength]byte `cbor:message_id`
SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`
SentAt time.Time `cbor:sent_at`
ReplyETA time.Duration `cbor:reply_eta`
Err error `cbor:err`
}</programlisting>
            <para>The client sends the <literal>Request</literal> message, which is defined in
                golang as follows. </para>
            <programlisting>type Request struct {
// ID is the unique identifier with respect to the Payload.
// This is only used by the ARQ.
ID *[MessageIDLength]byte `cbor:id`

// WithSURB indicates if the message should be sent with a SURB
// in the Sphinx payload.
WithSURB bool `cbor:with_surb`

// SURBID must be a unique identity for each request.
// This field should be nil if WithSURB is false.
SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`

// AppID must be a unique identity for the client application
// that is sending this Request.
AppID *[AppIDLength]byte `cbor:app_id`

// DestinationIdHash is 32 byte hash of the destination Provider's
// identity public key.
DestinationIdHash *[32]byte `cbor:destination_id_hash`

// RecipientQueueID is the queue identity which will receive the message.
RecipientQueueID []byte `cbor:recipient_queue_id`

// Payload is the actual Sphinx packet.
Payload []byte `cbor:payload`

// IsSendOp is set to true if the intent is to send a message through
// the mix network.
IsSendOp bool `cbor:is_send_op`

// IsARQSendOp is set to true if the intent is to send a message through
// the mix network using the naive ARQ error correction scheme.
IsARQSendOp bool `cbor:is_arq_send_op`

// IsEchoOp is set to true if the intent is to merely test that the unix
// socket listener is working properly; the Response payload will be
// contain the Request payload.
IsEchoOp bool `cbor:is_echo_op`

// IsLoopDecoy is set to true to indicate that this message shall
// be a loop decoy message.
IsLoopDecoy bool `cbor:is_loop_decoy`

// IsDropDecoy is set to true to indicate that this message shall
// be a drop decoy message.
IsDropDecoy bool `cbor:is_drop_decoy`
}</programlisting>
        </section>
        <section xml:id="protocol-description">
            <title xml:id="protocol-description.title">2.4 Protocol description</title>
            <para>Upon connecting to the daemon socket the client must wait for two messages. The
                first message received must have its
                    <?oxy_comment_start author="dwrob" timestamp="20250110T163639-0800" comment="Not defined in either code snippet. Is this saying that the the message is a status message?"?><literal>is_status</literal><?oxy_comment_end?>
                field set to <emphasis role="bold">true</emphasis> and its
                    <literal>is_connected</literal> field indicating whether or not the daemon has a
                mixnet PQ Noise protocol connection to an entry node. </para>
            <para>The client then awaits the second message, which contains the PKI document in its
                    <literal>payload</literal> field. This marks the end of the initial connection
                sequence. Note that this PKI document is stripped of all cryptographic signatures. </para>
            <para>In the next protocol phase, the client may send <literal>Request</literal>
                messages to the daemon in order to cause the daemon to encapsulate the given payload
                in a Sphinx packet and send it to the gateway node. Likewise the daemon my send the
                client <literal>Response</literal> messages at any time during this protocol phase.
                These <literal>Response</literal> messages may indicate a connection status change,
                a new PKI document, or a message-sent or reply event. </para>
        </section>
        <section xml:id="request-message-fields">
            <title xml:id="request-message-fields.title">2.5 Request message fields</title>
            <para>Several <literal>Request</literal> fields need further discussion.</para>
            <para>Each <literal>Request</literal> message sent by a connector needs to have the
                    <literal>app_id</literal> field set to an ID that is unique among the
                applications using the connector. The <literal>app_id</literal> is used by the
                daemon to route <literal>Response</literal> messages to the correctconnector socket. </para>
            <para>The remaining fields must conform to the following: </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>with_surb</literal> is set to <emphasis role="bold">true</emphasis>
                        if a Sphinx packet with a SURB in its payload should be sent. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>surbid</literal> is used to uniquely identify the reponse to a
                        message sent with the <literal>with_surb</literal> field set to <emphasis
                            role="bold">true</emphasis>. It should NOT be set if using the built-in
                        automatic repeat request (ARQ) for reliability and optional retransmission.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>is_send_op</literal> must be set to true. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>payload</literal> must be set to the message payload being sent.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>destination_id_hash</literal> is the 32-byte hash of the
                        destination entry node’s public identity key. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>recipient_queue_id</literal> is the destination queue identity.
                        This is the destination that the message will be delivered to. </para>
                </listitem>
            </itemizedlist>
            <para>If a on- way message should be sent with no SURB, then
                    <literal>with_surb</literal> should be set to <emphasis role="bold"
                    >false</emphasis> and <literal>surbid</literal> may be <emphasis role="bold"
                    >nil</emphasis>. If, however, the thin client wishes to send a reliable message
                using the daemon’s ARQ, then the following fields must be set: </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>id</literal> specifies the message ID that uniquely identifies this
                        message and its eventual reply.</para>
                </listitem>
                <listitem>
                    <para>
                        <literal>with_surb</literal> is set to <emphasis role="bold"
                        >true</emphasis>.</para>
                </listitem>
                <listitem>
                    <para>
                        <literal>is_arq_send_op</literal> is set to <emphasis role="bold"
                            >true</emphasis>. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>payload</literal> is set to the message payload, as usual.</para>
                </listitem>
                <listitem>
                    <para>
                        <literal>destination_id_hash</literal> is the 32-byte hash of the
                        destination service node’s public identity key.</para>
                </listitem>
                <listitem>
                    <para><literal>recipient_queue_id</literal> is the destination queue ID. This is
                        the destination that the message will be delivered to. </para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="response-message-fields">
            <title xml:id="response-message-fields.title">2.6 Response message fields</title>
            <para>The connector library always begins a connection to the daemon with two messages,
                a connection status followed by a PKI document. </para>
            <para>After this connection sequence phase, the daemon may send the library a connection
                status or PKI document update at any time. </para>
            <para>The connector library can recieve four possible events inside of
                    <literal>Response</literal> messages: </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para>
                        <emphasis role="bold">connection status event </emphasis></para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>is_connected</literal> indicates whether the client is
                                connected or not. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>err</literal> may contain an error indicating why
                                connection status changed. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="bold"> new PKI document event </emphasis></para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>payload</literal> is the CBOR-serialized PKI document,
                                stripped of cryptographic signatures. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="bold"> message sent event </emphasis></para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>message_id</literal> is a unique message ID. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>surb_id</literal> is the SURB ID. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>sent_at</literal> is the time when the message was
                                sent.</para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>replay_eta</literal> is the time when we expect a
                                reply.</para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>err</literal> is the optional error we received when
                                attempting to send a message. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="bold"> message reply event </emphasis></para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>message_id</literal> is a unique message ID. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>surb_id</literal> is a the SURB ID.</para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>payload</literal> is the replay payload .</para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>err</literal> is the error, if any. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
        </section>
    </section>
</article>
