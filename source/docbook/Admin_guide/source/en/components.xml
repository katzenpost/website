<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>

<!-- The XSL transform inserts these values as Hugo frontmatter. -->
<!-- Additionally, a "date" timestamp is inserted by the stylesheet. -->
<?title  ?>
<?linkTitle "Components and configuration" ?>  <!-- Section menu link text -->
<?url "docs/admin_guide/components.html" ?> <!-- Required to make image links work -->
<?description "" ?> <!-- Optional -->
<?draft false ?> <!-- Optional -->
<?slug "" ?> <!-- Optional -->
<?layout "" ?> <!-- Optional -->
<?type "" ?> <!-- Optional -->
<?weight 10 ?> <!-- Optional -->

<!DOCTYPE article [
    <!ENTITY % shared-content SYSTEM "../../../shared-content.ent">
    %shared-content;
]>

<article xmlns="http://docbook.org/ns/docbook"
    version="5.1"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:id="components">
    <info>
        <title xml:id="components.title">Components and configuration of the &program_name; mixnet</title>
    </info>
    
    <para>This section of the &program_name; technical documentation provides an introduction to the
        software components that make up &program_name; and guidance on how to configure each
        component.  The intended reader is a system administrator who wants to implement a working,
        production &program_name; network. </para>
    <para>For information about the theory and design of this software, see <link xlink:href="&baseURL;docs/admin_guide/introduction.html"
        >Introducing &program_name;, a modern mixnet</link><!--<xref
            linkend="introduction" endterm="introduction.title"/>-->. For a quickly deployable,
        non-production test network (primarily for use by developers), <link xlink:href="&baseURL;docs/admin_guide/docker.html"
        >Using the &program_name; Docker test network</link><!--<xref linkend="container" endterm="container.title"/>-->.</para>    
 
    <section xml:id="overview"><info><title xml:id="overview.title">Understanding the &program_name; components</title></info>
        
        <para>The core of &program_name; consists of two program executables,
                <!--<link linkend="voter-usage"
                >dirauth</link> and <link linkend="server-usage">server</link>--><link
                xlink:href="&baseURL;docs/admin_guide/operations.html#voter-usage">dirauth</link> and <link
                xlink:href="&baseURL;docs/admin_guide/operations.html#server-usage">server</link>. Running
            the <command>dirauth </command>commmand runs a <emphasis>directory authority</emphasis>
            node, or <emphasis>dirauth</emphasis>, that functions as part of the mixnet's public-key
            infrastructure (PKI). Running the <command>server</command> runs either a
                <emphasis>mix</emphasis> node, a <emphasis>gateway</emphasis> node, or a
                <emphasis>service</emphasis> node, depending on the configuration. Configuration
            settings are provided in an associated <filename>katzenpost-authority.toml</filename> or
                <filename>katzenpost.toml</filename> file respectively. </para>
        <para>In addition to the server components, &program_name; also supports connections to
            client applications hosted externally to the mix network and communicating with it
            through gateway nodes. </para>
        <para>A model mix network is shown in Figure 1.</para>
        <figure><info><title>The pictured element types correspond to discrete client and server programs that
            &program_name; requires to function. </title></info>
            
            <mediaobject>                                           
                <imageobject>
                    <imagedata fileref="pix/components-production.png"/>
                </imageobject>
            </mediaobject>
            
        </figure>
        <para>The mix network contains an <emphasis>n</emphasis>-layer topology of mix-nodes, with
            three nodes per layer in this example. Sphinx packets traverse the network in one
            direction only. The gateway nodes allow clients to interact with the mix network. The
            service nodes provide mix network services that mix network clients can interact with.
            All messages sent by clients are handed to a <emphasis>connector</emphasis> daemon
            hosted on the client system, passed across the Internet to a gateway, and then relayed
            to a service node by way of the nine mix nodes. The service node sends its reply back
            across the mix-node layers to a gateway, which transmits it across the Internet to be
            received by the targeted client. The mix, gateway, and service nodes send <emphasis>mix
                descriptors</emphasis> to the dirauths and retrieve a <emphasis>consensus
                document</emphasis> from them, described below.</para>
        <para>In addition to the server components, &program_name; supports connections to client
            applications hosted externally to the mix network and communicating with it through
            gateway nodes and, in some cases, a client connector.</para>
        <section xml:id="intro-dirauth"><info><title xml:id="intro-dirauth.title">Directory authorities (dirauths)</title></info>
            
            <para>Dirauths compose the decentralized public key infrastructure (PKI) that serves as
                the root of security for the entire mix network. Clients, mix nodes, gateways nodes,
                and service nodes rely on the PKI/dirauth system to maintain and sign an up-to-date
                consensus document, providing a view of the network including connection information
                and public cryptographic key materials and signatures.</para>
            <para>Every 20 minutes (the current value for an <emphasis>epoch</emphasis>), each mix,
                gateway, and service node signs a mix descriptor and uploads it to the dirauths. The
                dirauths then vote on a new consensus document. If consensus is reached, each
                dirauth signs the document. Clients and nodes download the document as needed and
                verify the signatures. Consensus fails when 1/2 + 1 nodes fail, which yields greater
                fault tolerance than, for example, Byzantine Fault Tolerance, which fails when 1/3 +
                1 of the nodes fail.</para>
            <para>The PKI signature scheme is fully configurable by the dirauths. Our recommendation
                is to use a hybrid signature scheme consisting of classical Ed25519 and the
                post-quantum, stateless, hash-based signature scheme known as Sphincs+ (with the
                parameters: "sphincs-shake-256f"), which is designated in &program_name;
                configurations as "Ed25519 Sphincs+". Examples are provided below.</para>
        </section>
        <section xml:id="intro-mix"><info><title xml:id="intro-mix.title">Mix nodes</title></info>
            
            <para>The mix node is the fundamental building block of the mix network. </para>
            <para>&program_name; mix nodes are arranged in a layered topology to achieve the best
                levels of anonymity and ease of analysis while being flexible enough to scale with
                traffic demands. </para>
        </section>
        <section xml:id="intro-gateway"><info><title xml:id="intro-gateway.title">Gateway nodes</title></info>
            
            <para>Gateway nodes provide external client access to the mix network. Because gateways
                are uniquely positioned to identify clients, they are designed to have as little
                information about client behavior as possible. Gateways are randomly selected and
                have no persistent relationship with clients and no knowledge of whether a client's
                packets are decoys or not. When client traffic through a gateway is slow, the node
                additionally generates decoy traffic. </para>
        </section>
        <section xml:id="intro-service"><info><title xml:id="intro-service.title">Service nodes</title></info>
            
            <para><?oxy_comment_start author="dwrob" timestamp="20241114T125846-0800" comment="Division of service nodes into replicas and couriers is not addressed here."?>Service
                nodes <?oxy_comment_end?>provide functionality requested by clients. They are
                logically positioned at the deepest point of the mix network, with incoming queries
                and outgoing replies both needing to traverse all <emphasis>n</emphasis> layers of
                mix nodes. A service node's functionality may involve storing messages, publishing
                information outside of the mixnet, interfacing with a blockchain node, and so on.
                Service nodes also process decoy packets. </para>
        </section>
        <section xml:id="intro-client"><info><title xml:id="intro-client.title"><?oxy_comment_start author="dwrob" timestamp="20241114T164534-0800" comment="This will be removed or reworked when we have a client user guide."?>Clients<?oxy_comment_end?></title></info>
            
            <para>Client applications should be designed so that the following conditions are
                met:</para>
            <itemizedlist>
                <listitem>
                    <para>Separate service requests from a client are unlinkable. Repeating the same
                        request may be lead to linkability. </para>
                </listitem>
                <listitem>
                    <para>Service nodes and clients have no persistent relationship.</para>
                </listitem>
                <listitem>
                    <para>Cleints generate a stream of packets addressed to random or pseudorandom
                        services regardless of whether a real service request is being made. Most of
                        these packets will be decoy traffic.</para>
                </listitem>
                <listitem>
                    <para>Traffic from a client to a service node must be correctly coupled with
                        decoy traffic. This can mean that the service node is chosen independently
                        from traffic history, or that the transmitted packet replaces a decoy packet
                        that was meant to go to the desired service.</para>
                </listitem>
            </itemizedlist>
            <para>&program_name; currently includes several client applications. All applications
                make extensive use of Sphinx single-use reply blocks (SURBs), which enable service
                nodes to send replies without knowing the location of the client. Newer clients
                require a connection through the client <emphasis>connector</emphasis>, which
                provides multiplexing and privilege separation with a consequent reduction in
                processing overhead. These clients also implement the Pigeonhole storage and BACAP
                protocols detailed in <emphasis role="bold">Place-holder for research paper link</emphasis>. </para>
            <para>The following client applications are available.<table frame="all"><info><title>&program_name; clients</title></info>
                    
                    <tgroup cols="4">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="newCol2" colnum="2" colwidth="1*"/>
                        <colspec colname="c2" colnum="3" colwidth="1*"/>
                        <colspec colname="c3" colnum="4" colwidth="1*"/>
                        <thead>
                            <row>
                                <entry>
                                    <para>Name</para>
                                </entry>
                                <entry>
                                    <para>Needs connector</para>
                                </entry>
                                <entry>
                                    <para>Description</para>
                                </entry>
                                <entry>
                                    <para>Code</para>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <para><emphasis role="bold">Ping</emphasis></para>
                                </entry>
                                <entry>
                                    <para>no</para>
                                </entry>
                                <entry>
                                    <para>The mix network equivalent of an ICMP ping utility, used
                                        for network testing.</para>
                                </entry>
                                <entry>
                                    <para>GitHub: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost/katzenpost/tree/main/ping">ping</link></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><emphasis role="bold">Katzen</emphasis></para>
                                </entry>
                                <entry>
                                    <para>no</para>
                                </entry>
                                <entry>
                                    <para>A text chat client with file-transfer support.</para>
                                </entry>
                                <entry>
                                    <para>GitHub: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost/katzen">katzen</link></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><emphasis role="bold">Status</emphasis></para>
                                </entry>
                                <entry>
                                    <para>yes</para>
                                </entry>
                                <entry>
                                    <para>An HTML page containing status information about the mix
                                        network.</para>
                                </entry>
                                <entry>
                                    <para>GitHub: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost/status">status</link></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><emphasis role="bold">Worldmap</emphasis></para>
                                </entry>
                                <entry>yes</entry>
                                <entry>
                                    <para>An HTML page with a world map showing geographic locations
                                        of mix network nodes. </para>
                                </entry>
                                <entry>
                                    <para>GitHub: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost/worldmap">worldmap</link></para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></para>
        </section>
    </section>
    <section xml:id="configuration"><info><title xml:id="configuration.title">Configuring &program_name;</title></info>
        
 
        
        <para>This section documents the configuration parameters for each type of &program_name;
            server node. Each node has its own configuration file in <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://toml.io/en/v1.0.0">TOML</link> format. </para>

        <section xml:id="auth-config"><info><title xml:id="auth-config.title">Configuring directory authorities</title></info>
            
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/dirauth_mixnet/auth1/authority.toml</filename>. In a
                real-world mixnet, the component hosts would not be sharing a single IP address. For
                more information about the test mixnet, see <emphasis role="bold"><link xlink:href="&baseURL;docs/admin_guide/docker.html"
                        >Using the &program_name; Docker test network</link><!--<xref linkend="container" endterm="container.title"/>--></emphasis>.</para>
            <table frame="all"><info><title><emphasis role="bold">Directory authority (dirauth) configuration
                        sections</emphasis></title></info>
                
                <tgroup cols="1">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <tbody>
                        <row>
                            <entry>            
                                <para><xref linkend="auth-server-section-config" endterm="auth-server-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-authorities-section-config" endterm="auth-authorities-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-logging" endterm="auth-logging.title"/></para>
                            </entry>
                        </row>

                        <row>
                            <entry>
                                <para><xref linkend="auth-parameters" endterm="auth-parameters.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-debug" endterm="auth-debug.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-mixes-section-config" endterm="auth-mixes-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-gatewaynodes-section-config" endterm="auth-gatewaynodes-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-servicenodes-section-config" endterm="auth-servicenodes-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-topology" endterm="auth-topology.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="auth-sphinx-config" endterm="auth-sphinx-config.title"/></para>
                            </entry>
                        </row>              
                    </tbody>
                </tgroup>
            </table>
            

            
            
            <!--General TOML note:
    
    https://toml.io/en/v1.0.0
    \-->

            <section xml:id="auth-server-section-config"><info><title xml:id="auth-server-section-config.title">Dirauth: Server section</title></info>
                
                <para>The <code>Server</code> section configures mandatory basic parameters for each
                    directory authority.</para>
                <programlisting>[Server]
    Identifier = "auth1"
    WireKEMScheme = "xwing"
    PKISignatureScheme = "Ed25519 Sphincs+"
    Addresses = ["tcp://127.0.0.1:30001"]
    DataDir = "/dirauth_mixnet/auth1"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for a node, and must be unique
                            per mixnet. The identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    &WireKEMScheme;
                    <listitem>
                        <para><emphasis role="bold">PKISignatureScheme</emphasis></para>
                        <para>Specifies the cryptographic signature scheme which will be used by all
                            components of the mix network when interacting with the PKI system. Mix
                            nodes sign their descriptors using this signature scheme, and dirauth
                            nodes similarly sign PKI documents using the same scheme.</para>
                        <para>The following signature schemes are supported: "ed25519", "ed448",
                            "Ed25519 Sphincs+", "Ed448-Sphincs+", "Ed25519-Dilithium2",
                            "Ed448-Dilithium3" </para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Addresses</emphasis></para>
                        <!--Note that there is no "BindAddresses" parameter in the Server section for dirauths.-->
                        <para>Specifies a list of one or more address URLs in a format that contains
                            the transport protocol, IP address, and port number that the node will
                            bind to for incoming connections. &program_name; supports URLs with that
                            start with either "tcp://" or "quic://" such as:
                            ["tcp://192.168.1.1:30001"] and ["quic://192.168.1.1:40001"].</para>
                        <para>Type: []string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">DataDir</emphasis></para>
                        <para>Specifies the absolute path to a node's state directory. This is
                                where<filename> persistence.db</filename> is written to disk and
                            where a node stores its cryptographic key materials when started with
                            the "-g" command-line option.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
                <para/>
            </section>
            <section xml:id="auth-authorities-section-config"><info><title xml:id="auth-authorities-section-config.title">Dirauth: <code>Authorities</code>
                    section</title></info>
                
                <para>An <code>Authorities</code> section is configured for each peer authority. We
                    recommend using <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://quickref.me/toml.html">TOML's style</link>
                    for multi-line quotations for key materials.</para>
                <programlisting>[[Authorities]]
    Identifier = "auth1"
    IdentityPublicKey = """
-----BEGIN ED25519 PUBLIC KEY-----
dYpXpbozjFfqhR45ZC2q97SOOsXMANdHaEdXrP42CJk=
-----END ED25519 PUBLIC KEY-----
"""
    PKISignatureScheme = "Ed25519"
    LinkPublicKey = """
-----BEGIN XWING PUBLIC KEY-----
ooQBPYNdmfwnxXmvnljPA2mG5gWgurfHhbY87DMRY2tbMeZpinJ5BlSiIecprnmm
QqxcS9o36IS62SVMlOUkw+XEZGVvc9wJqHpgEgVJRAs1PCR8cUAdM6QIYLWt/lkf
SPKDCtZ3GiSIOzMuaglo2tarIPEv1AY7r9B0xXOgSKMkGyBkCfw1VBZf46MM26NL
...
gHtNyQJnXski52O03JpZRIhR40pFOhAAcMMAZDpMTVoxlcdR6WA4SlBiSceeJBgY
Yp9PlGhCimx9am99TrdLoLCdTHB6oowt8tss3POpIOxaSlguyeym/sBhkUrnXOgN
ldMtDsvvc9KUfE4I0+c+XQ==
-----END XWING PUBLIC KEY-----
    """
    WireKEMScheme = "xwing"
    Addresses = ["tcp://127.0.0.1:30001"]</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for the node which must be
                            unique per mixnet. The identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKey</emphasis></para>
                        <para>String containing the node's public identity key in PEM format.
                                <code>IdentityPublicKey</code> is the node's permanent identifier
                            and is used to verify cryptographic signatures produced by its private
                            identity key.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">PKISignatureScheme</emphasis></para>
                        <para>Specifies the cryptographic signature scheme used by all directory
                            authority nodes. <code>PKISignatureScheme</code> must match the scheme
                            specified in the <code>Server</code> section of the configuration. </para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LinkPublicKey</emphasis></para>
                        <para>String containing the peer's public link-layer key in PEM format.
                                <code>LinkPublicKey</code> must match the specified
                                <code>WireKEMScheme</code>.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    &WireKEMScheme;
                    <listitem>
                        <para><emphasis role="bold">Addresses</emphasis></para>
                        <!--Since dirauths cannot identify themselves with a "BindAddresses" parameter, there is none in references to peer dirauths.-->
                        <para>Specifies a list of one or more address URLs in a format that contains
                            the transport protocol, IP address, and port number that the node will
                            bind to for incoming connections. &program_name; supports URLs with that
                            start with either "tcp://" or "quic://" such as:
                            ["tcp://192.168.1.1:30001"] and ["quic://192.168.1.1:40001"].</para>
                        <para>Type: []string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-logging">
                <title xml:id="auth-logging.title">Dirauth: Logging section</title>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: logging (/1/3)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/3)"/>
                                
            </section>
            <section xml:id="auth-parameters"><info><title xml:id="auth-parameters.title">Dirauth: Parameters section</title></info>
                
                <para>The <code>Parameters</code> section contains the network parameters.</para>
                <programlisting>[Parameters]
    SendRatePerMinute = 0
    Mu = 0.005
    MuMaxDelay = 1000
    LambdaP = 0.001
    LambdaPMaxDelay = 1000
    LambdaL = 0.0005
    LambdaLMaxDelay = 1000
    LambdaD = 0.0005
    LambdaDMaxDelay = 3000
    LambdaM = 0.0005
    LambdaG = 0.0
    LambdaMMaxDelay = 100
    LambdaGMaxDelay = 100</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">SendRatePerMinute</emphasis></para>
                        <para>Specifies the maximum allowed rate of packets per client per gateway
                            node. Rate limiting is done on the gateway nodes.</para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Mu</emphasis></para>
                        <para>Specifies the inverse of the mean of the exponential distribution from
                            which the Sphinx packet per-hop mixing delay will be sampled.</para>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MuMaxDelay</emphasis></para>
                        <para>Specifies the maximum Sphinx packet per-hop mixing delay in
                            milliseconds. </para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaP</emphasis></para>
                        <para>Specifies the inverse of the mean of the exponential distribution that
                            clients sample to determine the time interval between sending messages,
                            whether actual messages from the FIFO egress queue or decoy messages if
                            the queue is empty.</para>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaPMaxDelay</emphasis></para>
                        <para>Specifies the maximum send delay interval for LambdaP in
                            milliseconds.</para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaL</emphasis></para>
                        <para>Specifies the inverse of the mean of the exponential distribution that
                            clients sample to determine the delay interval between loop
                            decoys.</para>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaLMaxDelay</emphasis></para>
                        <para>Specifies the maximum send delay interval for LambdaL in
                            milliseconds.</para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaD</emphasis></para>
                        <para>LambdaD is the inverse of the mean of the exponential distribution
                            that clients sample to determine the delay interval between decoy drop
                            messages. </para>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaDMaxDelay</emphasis></para>
                        <para>Specifies the maximum send interval in for LambdaD in milliseconds. </para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaM</emphasis></para>
                        <para>LambdaM is the inverse of the mean of the exponential distribution
                            that mix nodes sample to determine the delay between mix loop
                            decoys.</para>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaG</emphasis></para>
                        <para>LambdaG is the inverse of the mean of the exponential distribution
                            that gateway nodes to select the delay between gateway node
                            decoys.</para>
                        <warning>
                            <para>Do not set this value manually in the TOML configuration file. The
                                field is used internally by the dirauth server state machine.</para>
                        </warning>
                        <para>Type: float64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaMMaxDelay</emphasis></para>
                        <para>Specifies the maximum delay for LambdaM in milliseconds.</para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaGMaxDelay</emphasis></para>
                        <para>Specifies the maximum delay for LambdaG in milliseconds.</para>
                        <para>Type: uint64</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-debug"><info><title xml:id="auth-debug.title">Dirauth: Debug section</title></info>
                
                <programlisting>[Debug]
    Layers = 3
    MinNodesPerLayer = 1
    GenerateOnly = false</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Layers</emphasis></para>
                        <para>Specifies the number of non-service-provider layers in the network
                            topology.</para>
                        <para>Type: int</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MinNodesrPerLayer</emphasis></para>
                        <para>Specifies the minimum number of nodes per layer required to form a
                            valid consensus document.</para>
                        <para>Type: int</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">GenerateOnly</emphasis></para>
                        <para>If <emphasis role="bold">true</emphasis>, the server halts and cleans
                            up the data directory immediately after long-term key generation.</para>
                        <para>Type: bool</para>
                        <para>Required: No</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-mixes-section-config"><info><title xml:id="auth-mixes-section-config.title">Dirauth: Mixes
                    sections</title></info>
                
                <para>The <code>Mixes</code> configuration sections list mix nodes that are known to
                    the authority.</para>
                <programlisting>[[Mixes]]
    Identifier = "mix1"
    IdentityPublicKeyPem = "../mix1/identity.public.pem"

[[Mixes]]
    Identifier = "mix2"
    IdentityPublicKeyPem = "../mix2/identity.public.pem"

[[Mixes]]
    Identifier = "mix3"
    IdentityPublicKeyPem = "../mix3/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for a mix node, and must be
                            unique per mixnet. The identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a mix node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-gatewaynodes-section-config"><info><title xml:id="auth-gatewaynodes-section-config.title">Dirauth:
                        GatewayNodes section</title></info>
                
                <para>The <code>GatewayNodes</code> sections list gateway nodes that are known to
                    the authority.</para>
                <programlisting>[[GatewayNodes]]
    Identifier = "gateway1"
    IdentityPublicKeyPem = "../gateway1/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for a gateway node, and must
                            be unique per mixnet. Identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a gateway node's public identity signing key,
                            also known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-servicenodes-section-config"><info><title xml:id="auth-servicenodes-section-config.title">Dirauth:
                        ServiceNodes sections</title></info>
                
                <para>The <code>ServiceNodes</code> sections list service nodes that are known to
                    the authority.</para>
                <programlisting>[[ServiceNodes]]
    Identifier = "servicenode1"
    IdentityPublicKeyPem = "../servicenode1/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for a service node, and must
                            be unique per mixnet. Identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a service node's public identity signing key,
                            also known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-topology"><info><title xml:id="auth-topology.title">Dirauth: Topology section</title></info>
                
                <para>The <code>Topology</code> section defines the layers of the mix network and
                    the mix nodes in each layer.</para>
                <programlisting>[Topology]
                    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix1"
            IdentityPublicKeyPem = "../mix1/identity.public.pem"
    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix2"
            IdentityPublicKeyPem = "../mix2/identity.public.pem"
    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix3"
            IdentityPublicKeyPem = "../mix3/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Specifies the human-readable identifier for a node, and must be unique
                            per mixnet. The identifier can be an FQDN but does not have to
                            be.</para>
                        <para>Type: string</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a mix node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-sphinx-config"><info><title xml:id="auth-sphinx-config.title">Dirauth: SphinxGeometry
                    section</title></info>
                
                <para>Sphinx is an encrypted nested-packet format designed primarily for mixnets.
                    The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.freehaven.net/anonbib/cache/DBLP:conf/sp/DanezisG09.pdf">original Sphinx paper</link> described a non-interactive key exchange
                    (NIKE) employing classical encryption. The &program_name; implementation
                    strongly emphasizes configurability, supporting key encapsulation mechanisms
                    (KEMs) as well as NIKEs, and enabling the use of either classical or hybrid
                    post-quantum cryptography. Hybrid constructions offset the newness of
                    post-quantum algorithms by offering heavily tested classical algorithms as a
                    fallback.</para>
                <note>
                    <para>Sphinx, the nested-packet format, should not be confused with <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://sphincs.org/index.html">Sphincs or Sphincs+</link>, which
                        are post-quantum signature schemes.</para>
                </note>
                <para>&program_name; Sphinx also relies on the following classical cryptographic
                    primitives: </para>
                <itemizedlist>
                    <listitem>
                        <para>CTR-AES256, a stream cipher</para>
                    </listitem>
                    <listitem>
                        <para>HMAC-SHA256, a message authentication code (MAC) function</para>
                    </listitem>
                    <listitem>
                        <para>HKDF-SHA256, a key derivation function (KDF)</para>
                    </listitem>
                    <listitem>
                        <para>AEZv5, a strong pseudorandom permutation (SPRP)</para>
                    </listitem>
                </itemizedlist>
                <para>All dirauths must be configured to use the same <code>SphinxGeometry</code>
                    parameters. Any geometry not advertised by the PKI document will fail. Each
                    dirauth publishes the hash of its <code>SphinxGeometry</code> parameters in the
                    PKI document for validation by its peer dirauths. </para>
                                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: sphinxgeometry (/1/4)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/4)"/>
                
            </section>
        </section>
        <section xml:id="mix-config"><info><title xml:id="mix-config.title">Configuring mix nodes</title></info>
            
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/dirauth_mixnet/mix1/katzenpost.toml</filename>. In a
                real-world mixnet, the component hosts would not be sharing a single IP address. For
                more information about the test mixnet, see <link xlink:href="&baseURL;docs/admin_guide/docker.html"
                    >Using the &program_name; Docker test network</link><!--<xref linkend="container" endterm="container.title"/>-->.</para>
            <para>
                <table frame="all"><info><title>Mix node configuration sections</title></info>
                    
                    <tgroup cols="1">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <tbody>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-server-section-config" endterm="mix-server-section-config.title"/></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-logging-config" endterm="mix-logging-config.title"/></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-pki-config" endterm="mix-pki-config.title"/></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-management-config" endterm="mix-management-config.title"/></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-sphinx-config" endterm="mix-sphinx-config.title"/></para>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <para><xref linkend="mix-debug-config" endterm="mix-debug-config.title"/></para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
            <section xml:id="mix-server-section-config"><info><title xml:id="mix-server-section-config.title">Mix node: Server section</title></info>
                
                <para>The <code>Server</code> section configures mandatory basic parameters for each
                    server node.</para>
                <para>
                    <programlisting>[Server]
  Identifier = "mix1"
  WireKEM = "xwing"
  PKISignatureScheme = "Ed25519"
  Addresses = ["127.0.0.1:30008"]
  OnlyAdvertiseAltAddresses = false
  MetricsAddress = "127.0.0.1:30009"
  DataDir = "/dirauth_mixnet/mix1"
  IsGatewayNode = false
  IsServiceNode = false
  [Server.AltAddresses]</programlisting>
                </para>
                
                <!--See comment in includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--serverconfig (/1/2)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/2)"/>               

            </section>
            <section xml:id="mix-logging-config"><info><title xml:id="mix-logging-config.title">Mix node: Logging section</title></info>
                
                <!--See comment in includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--logging (/1/3)-->

                <xi:include href="includes/xincludes.xml" xpointer="element(/1/3)"/>

            </section>
            <section xml:id="mix-pki-config"><info><title xml:id="mix-pki-config.title">Mix node: PKI section</title></info>
                
                <!--See comment in includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--pki (/1/6)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/6)"/>                
                 
            </section>
            <section xml:id="mix-management-config"><info><title xml:id="mix-management-config.title">Mix node: Management section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: management (/1/5)-->

                <xi:include href="includes/xincludes.xml" xpointer="element(/1/5)"/>

            </section>
            <section xml:id="mix-sphinx-config"><info><title xml:id="mix-sphinx-config.title">Mix node: SphinxGeometry section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: sphinxgeometry (/1/4)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/4)"/> 
 
            </section>
            <section xml:id="mix-debug-config"><info><title xml:id="mix-debug-config.title">Mix node: Debug section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: serverdebug (/1/7)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/7)"/>                
 
            </section>
        </section>
        <section xml:id="gateway-config"><info><title xml:id="gateway-config.title">Configuring gateway nodes</title></info>
            
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/dirauth_mixnet/gateway1/katzenpost.toml</filename>.
                In a real-world mixnet, the component hosts would not be sharing a single IP
                address. For more information about the test mixnet, see <link xlink:href="&baseURL;docs/admin_guide/docker.html"
                    >Using the &program_name; Docker test network</link><!--<xref linkend="container" endterm="container.title"/>-->.</para>
            <table frame="all"><info><title>Gateway node configuration sections</title></info>
                
                <tgroup cols="1">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <tbody>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-server-section-config" endterm="gateway-server-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-logging-config" endterm="gateway-logging-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-gateway-section-config" endterm="gateway-gateway-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-pki-config" endterm="gateway-pki-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-management-config" endterm="gateway-management-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-sphinx-config" endterm="gateway-sphinx-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="gateway-debug-config" endterm="gateway-debug-config.title"/></para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <section xml:id="gateway-server-section-config"><info><title xml:id="gateway-server-section-config.title">Gateway node: Server section</title></info>
                
                <para>The <code>Server</code> section configures mandatory basic parameters for each
                    server node.</para>
                <programlisting>[Server]
    Identifier = "gateway1"
    WireKEM = "xwing"
    PKISignatureScheme = "Ed25519"
    Addresses = ["127.0.0.1:30004"]
    OnlyAdvertiseAltAddresses = false
    MetricsAddress = "127.0.0.1:30005"
    DataDir = "/dirauth_mixnet/gateway1"
    IsGatewayNode = true
    IsServiceNode = false
    [Server.AltAddresses]
        TCP = ["localhost:30004"]</programlisting>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: serverconfig (/1/2)-->
                                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/2)"/>
                
            </section>
            <section xml:id="gateway-logging-config"><info><title xml:id="gateway-logging-config.title">Gateway node: Logging section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: logging (/1/3)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/3)"/>

            </section>
            <section xml:id="gateway-gateway-section-config"><info><title xml:id="gateway-gateway-section-config.title">Gateway node: Gateway
                    section</title></info>
                
                <para/>
                <para>The <code>Gateway</code> section of the configuration is required for configuring a Gateway
                    node. The section must contain <code>UserDB </code>and <code>SpoolDB</code>
                    definitions. <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/boltdb/bolt">Bolt</link> is an
                    embedded database library for the Go programming language that &program_name;
                    has used in the past for its user and spool databases. Because &program_name;
                    currently persists data on Service nodes instead of Gateways, these databases
                    will probably be deprecated in favour of in-memory concurrency structures. In
                    the meantime, it remains necessary to configure a Gateway node as shown below,
                    only changing the file paths as needed: </para>
                <programlisting>[Gateway]
    [Gateway.UserDB]
        Backend = "bolt"
            [Gateway.UserDB.Bolt]
                UserDB = "/dirauth_mixnet/gateway1/users.db"
    [Gateway.SpoolDB]
        Backend = "bolt"
            [Gateway.SpoolDB.Bolt]
                SpoolDB = "/dirauth_mixnet/gateway1/spool.db"</programlisting>
            </section>
            <section xml:id="gateway-pki-config"><info><title xml:id="gateway-pki-config.title">Gateway node: PKI section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: pki (/1/6)-->
                               
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/6)"/>
                
            </section>
            <section xml:id="gateway-management-config"><info><title xml:id="gateway-management-config.title">Gateway node: Management section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: management (/1/5)-->
                              
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/5)"/>                

            </section>
            <section xml:id="gateway-sphinx-config"><info><title xml:id="gateway-sphinx-config.title">Gateway node: SphinxGeometry section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: sphinxgeometry (/1/4)-->
                                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/4)"/>
                
            </section>
            <section xml:id="gateway-debug-config"><info><title xml:id="gateway-debug-config.title">Gateway node: Debug section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: serverdebug (/1/7)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/7)"/>
                
            </section>
        </section>
        <section xml:id="service-config"><info><title xml:id="service-config.title">Configuring service nodes</title></info>
            
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/dirauth_mixnet/servicenode1/authority.toml</filename>.
                In a real-world mixnet, the component hosts would not be sharing a single IP
                address. For more information about the test mixnet, see <link xlink:href="&baseURL;docs/admin_guide/docker.html"
                    >Using the &program_name; Docker test network</link><!--<xref linkend="container" endterm="container.title"/>-->.</para>
            <table frame="all"><info><title>Mix node configuration sections</title></info>
                
                <tgroup cols="1">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <tbody>
                        <row>
                            <entry>
                                <para><xref linkend="service-server-section-config" endterm="service-server-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-logging-config" endterm="service-logging-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-servicenode-section-config" endterm="service-servicenode-section-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-pki-config" endterm="service-pki-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-management-config" endterm="service-management-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-sphinx-config" endterm="service-sphinx-config.title"/></para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para><xref linkend="service-debug-config" endterm="service-debug-config.title"/></para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <section xml:id="service-server-section-config"><info><title xml:id="service-server-section-config.title">Service node: Server section</title></info>
                
                <para>The <code>Server</code> section configures mandatory basic parameters for each
                    server node.</para>
                <programlisting>[Server]
    Identifier = "servicenode1"
    WireKEM = "xwing"
    PKISignatureScheme = "Ed25519"
    Addresses = ["127.0.0.1:30006"]
    OnlyAdvertiseAltAddresses = false
    MetricsAddress = "127.0.0.1:30007"
    DataDir = "/dirauth_mixnet/servicenode1"
    IsGatewayNode = false
    IsServiceNode = true
    [Server.AltAddresses]</programlisting>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: serverconfig (/1/2)-->
                               
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/2)"/>
                
            </section>
            <section xml:id="service-logging-config"><info><title xml:id="service-logging-config.title">Service node: Logging section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: logging (/1/3)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/3)"/>
                
            </section>
            <section xml:id="service-servicenode-section-config"><info><title xml:id="service-servicenode-section-config.title">Service node: ServiceNode
                    section</title></info>
                
                <para>The <code>ServiceNode</code> section contains configurations for each network
                    service that &program_name; supports. </para>
                <para>Services, termed <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost/katzenpost/blob/main/docs/Specificatons/pdf/kaetzchen.pdf">Kaetzchen</link>, can be divided into built-in and external services.
                    External services are provided through the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://pkg.go.dev/github.com/katzenpost/katzenpost@v0.0.35/server/cborplugin#ResponseFactory">CBORPlugin</link>, a Go programming language implementation of the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://datatracker.ietf.org/doc/html/rfc8949">Concise Binary Object
                        Representation (CBOR)</link>, a binary data serialization format. While
                    native services need simply to be activated, external services are invoked by a
                    separate command and connected to the mixnet over a Unix socket. The plugin
                    allows mixnet services to be added in any programming language.</para>
                <programlisting>[ServiceNode]
                    
    [[ServiceNode.Kaetzchen]]
        Capability = "echo"
        Endpoint = "+echo"
        Disable = false
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "spool"
        Endpoint = "+spool"
        Command = "/dirauth_mixnet/memspool.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            data_store = "/dirauth_mixnet/servicenode1/memspool.storage"
            log_dir = "/dirauth_mixnet/servicenode1"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "pigeonhole"
        Endpoint = "+pigeonhole"
        Command = "/dirauth_mixnet/pigeonhole.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            db = "/dirauth_mixnet/servicenode1/map.storage"
            log_dir = "/dirauth_mixnet/servicenode1"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "panda"
        Endpoint = "+panda"
        Command = "/dirauth_mixnet/panda_server.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            fileStore = "/dirauth_mixnet/servicenode1/panda.storage"
            log_dir = "/dirauth_mixnet/servicenode1"
            log_level = "INFO"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "http"
        Endpoint = "+http"
        Command = "/dirauth_mixnet/proxy_server.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            host = "localhost:4242"
            log_dir = "/dirauth_mixnet/servicenode1"
            log_level = "DEBUG"</programlisting>
                <para><emphasis role="bold">Common parameters:</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Capability</emphasis></para>
                        <para>Specifies the protocol capability exposed by the agent.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Endpoint</emphasis></para>
                        <para>Specifies the provider-side Endpoint where the agent will accept
                            requests. While not required by the specification, this server only
                            supports Endpoints that are
                            <?oxy_comment_start author="dwrob" timestamp="20241107T101141-0800" comment="Example?"?>lower-case
                            local parts<?oxy_comment_end?> of an email address.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Command</emphasis></para>
                        <para>Specifies the full path to the external plugin program that implements
                            this <code>Kaetzchen</code> service.</para>
                        <para>Type: string</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MaxConcurrency</emphasis></para>
                        <para>Specifies the number of worker goroutines to start for this
                            service.</para>
                        <para>Type: int</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Config</emphasis></para>
                        <para>Specifies extra per-agent arguments to be passed to the agent's
                            initialization routine.</para>
                        <para>Type: map[string]interface{}</para>
                        <para>Required: Yes</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Disable</emphasis></para>
                        <para>If <emphasis role="bold">true</emphasis>, disables a configured
                            agent.</para>
                        <para>Type: bool</para>
                        <para>Required: No</para>
                    </listitem>
                </itemizedlist>
                <para><emphasis role="bold">Per-service parameters:</emphasis></para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">echo</emphasis></para>
                            <para>The internal <code>echo</code> service must be enabled on every
                                service node of a production mixnet for decoy traffic to work
                                properly. </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">spool</emphasis></para>
                            <para>The <code>spool</code> service supports the <code>catshadow</code>
                                storage protocol,
                                <?oxy_comment_start author="dwrob" timestamp="20241113T174007-0800" comment="Wasn&apos;t there also something about Panda and Reunion being don&apos;t-say-deprecated and needing this spool? They both appear to be configured as enabled in the example. What should be the messaging on this?  See highlighted text below."?>which
                                is required by the Katzen chat client<?oxy_comment_end?>. The
                                example configuration above shows spool enabled with the setting:<programlisting>Disable = false</programlisting><note>
                                    <para><code>Spool</code>, properly <code>memspool</code>, should
                                        not be confused with the spool database on gateway
                                        nodes.</para>
                                </note></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">data_store</emphasis></para>
                                    <para>Specifies the full path to the service database
                                        file.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para>Specifies the path to the node's log directory.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">pigeonhole</emphasis></para>
                            <para>The <code>pigeonhole</code> courier service supports the
                                Blinding-and-Capability scheme (BACAP)-based unlinkable messaging
                                protocols detailed in <emphasis role="bold">Place-holder for research paper link</emphasis>. Most of our future protocols
                                will use the <code>pigeonhole</code> courier service.</para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">db</emphasis></para>
                                    <para>Specifies the full path to the service database
                                        file.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para>Specifies the path to the node's log directory.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?><emphasis role="bold">panda</emphasis></para>
                            <para>The <code>panda</code> storage and authentication service
                                currently does not work properly.</para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">fileStore</emphasis></para>
                                    <para>Specifies the full path to the service database
                                        file.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem><?oxy_custom_end?>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para>Specifies the path to the node's log directory.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_level</emphasis></para>
                                    <para>Supported values are ERROR | WARNING | NOTICE |INFO |
                                        DEBUG.</para>
                                    <warning>
                                        <para>The DEBUG log level is unsafe for production
                                            use.</para>
                                    </warning>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                    <para>Required: Yes</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">http</emphasis></para>
                            <para>The <code>http</code> service is completely optional, but allows
                                the mixnet to be used as an HTTP proxy. This may be useful for
                                integrating with existing software systems.</para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">host</emphasis></para>
                                    <para>The host name and TCP port of the service.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para>Specifies the path to the node's log directory.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_level</emphasis></para>
                                    <para>Supported values are ERROR | WARNING | NOTICE |INFO |
                                        DEBUG.</para>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                    <para>Required: Yes</para>
                                    <warning>
                                        <para>The DEBUG log level is unsafe for production
                                            use.</para>
                                    </warning>
                                    <para>Type: string</para>
                                    <para>Required: Yes</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section xml:id="service-pki-config"><info><title xml:id="service-pki-config.title">Service node: PKI section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: pki (/1/6)-->

                <xi:include href="includes/xincludes.xml" xpointer="element(/1/6)"/>

            </section>
            <section xml:id="service-management-config"><info><title xml:id="service-management-config.title">Service node: Management section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: management (/1/5)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/5)"/>                                

            </section>
            <section xml:id="service-sphinx-config"><info><title xml:id="service-sphinx-config.title">Service node: SphinxGeometry section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: sphinxgeometry (/1/4)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/4)"/>                                
 
            </section>
            <section xml:id="service-debug-config"><info><title xml:id="service-debug-config.title">Service node: Debug section</title></info>
                
                <!--See includes/xincludes.xml for an explanation of the cursed DocBook addressing scheme used here. -->
                <!--Configuration section: serverdebug (/1/7)-->
                
                <xi:include href="includes/xincludes.xml" xpointer="element(/1/7)"/>                
                
            </section>
        </section>
    </section>
</article>
