<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?title?>
<?linkTitle "Mix network design" ?>
<?url "docs/specs/mixspec.html" ?>
<?description "" ?>
<?draft false ?>
<?slug "" ?>
<?layout "" ?>
<?type "" ?>
<?weight 25?>

<!DOCTYPE article [
<!ENTITY % shared-content SYSTEM "../../../shared-content.ent">
%shared-content;
<!ENTITY % terms SYSTEM "../../../terms.ent">
%terms;
<!ENTITY % references SYSTEM "../../../references.ent">
%references;
]>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1" xml:id="mixspec">

    <info>
        <title xml:id="mixspec.title">Mix network specification</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Yawning</firstname>
                    <surname>Angel</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>George</firstname>
                    <surname>Danezis</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>Claudia</firstname>
                    <surname>Diaz</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>Ania</firstname>
                    <surname>Piotrowska</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>David</firstname>
                    <surname>Stainton</surname>
                </personname>
            </author>
        </authorgroup>

        <abstract>
            <para> This document describes the high level architecture and detailed protocols and
                behavior required of mix nodes participating in the Katzenpost Mix Network. </para>
        </abstract>
    </info>
    
    <section xml:id="terminology">
        <title xml:id="terminology.title">Terminology</title>
        <para>The following terms are used in this specification.</para>
        <variablelist>
        &kib;    
        &mixnet;    
        &mix;    
        &node;    
        &entry;    
        &servicemix;    
        &user;    
        &client;    
        &katzenpost;    
        &classestraffic;    
        &packet;    
        &payload;    
        &message;    
        &msl;            
        </variablelist>
    </section>
    <section>
        <title>Conventions Used in This Document</title>
        <para> The key words <quote>MUST</quote>, <quote>MUST NOT</quote>, <quote>REQUIRED</quote>,
                <quote>SHALL</quote>, <quote>SHALL NOT</quote>, <quote>SHOULD</quote>, <quote>SHOULD
                NOT</quote>, <quote>RECOMMENDED</quote>, <quote>MAY</quote>, and
                <quote>OPTIONAL</quote> in this document are to be interpreted as described in <link
                linkend="RFC2119">RFC2119</link>
        </para>
    </section>

    <section xml:id="mixnet_introduction">
        <title xml:id="mixnet_introduction.title">1. Introduction</title>
        <para> This specification provides the design of a mix network meant provide an anonymous
            messaging protocol between clients and public mixnet services. </para>
        <para> Various system components such as client software, end to end messaging protocols,
            Sphinx cryptographic packet format and wire protocol are described in their own
            specification documents. </para>
    </section>
    <section xml:id="system-overview">
        <title xml:id="system-overview.title">2. System Overview</title>
        <para> The presented system design is based on <link linkend="LOOPIX">LOOPIX</link> Below,
            we present the system overview. </para>
        <para> The entry mixes are responsible for authenticating clients, accepting packets from
            the client, and forwarding them to the mix network, which then relays packets to the
            destination service mix. Our network design uses a strict topology where forward message
            traverse the network from entry mix to service mix. Service mixes can optionally reply
            if the forward message contained a Single Use Reply Block (see <link
                linkend="SPHINXSPEC">SPHINXSPEC</link>. </para>
        <para> The PKI system that handles the distribution of various network wide parameters, and
            information required for each participant to participate in the network such as IP
            address/port combinations that each node can be reached at, and cryptographic public
            keys. The specification for the PKI is beyond the scope of this document and is instead
            covered in <link linkend="KATZMIXPKI">KATZMIXPKI</link>. </para>
        <para> The mix network provides neither reliable nor in-order delivery semantics. The
            described mix network is neither a user facing messaging system nor is it an
            application. It is intended to be a low level protocol which can be composed to form
            more elaborate mixnet protocols with stronger more useful privacy notions. </para>
        <section xml:id="threat-model">
            <title xml:id="threat-model.title">2.1 Threat Model</title>
            <para> Here we cannot present the threat model to the higher level mixnet protocols.
                However this low level core mixnet protocol does have it’s own threat model which we
                attempt to illucidate here. </para>
            <para> We assume that the clients only talk to mixnet services. These services make use
                of a client provided delivery token known as a SURB (Single Use Reply Block) to send
                their replies to the client without knowing the client’s entry mix. This system
                guarantees third-party anonymity, meaning that no parties other than client and the
                service are able to learn that the client and service are communicating. Note that
                this is in contrast with other designs, such as Mixminion, which provide sender
                anonymity towards recipients as well as anonymous replies. </para>
            <para> Mixnet clients will randomly select an entry node to use and may reconnect if
                disconnected for under a duration threshold. The entry mix can determine the
                approximate message volume originating from and destined to a given client. We
                consider the entry mix follows the protocol and might be an honest-but-curious
                adversary. </para>
            <para> External local network observers can not determine the number of Packets
                traversing their region of the network because of the use of decoy traffic sent by
                the clients. Global observers will not be able to de-anonymize packet paths if there
                are enough packets traversing the mix network. Longer term statistical disclosure
                attacks are likely possible in order to link senders and receivers. </para>
            <para> A malicious mix only has the ability to remember which input packets correspond
                to the output packets. To discover the entire path all of the mixes in the path
                would have to be malicious. Moreover, the malicious mixes can drop, inject, modify
                or delay the packets for more or less time than specified. </para>
        </section>
        <section xml:id="network-topology">
            <title xml:id="network-topology.title">2.2 Network Topology</title>
            <para> The Katzenpost Mix Network uses a layered topology consisting of a fixed number
                of layers, each containing a set of mixes. At any given time each Mix MUST only be
                assigned to one specific layer. Each Mix in a given layer N is connected to every
                other Mix in the previous and next layer, and or every participating Provider in the
                case of the mixes in layer 0 or layer N (first and last layer). : </para>
            <programlisting>
Layer 0          Layer 1        Layer 2        Layer 3           Layer 4
+-----------+      +-------+      +-------+      +-------+      +-------------+
+-&gt; | entry mix | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  |              |              |              |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
+-&gt; | entry mix | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  |              |              |              |
|                  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  +-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|                      +-------+      +-------+      +-------+  |   +-------------+
|                                                               |
+---------------------------------------------------------------+
</programlisting>
            <para> Note: Multiple distinct connections are collapsed in the figure for sake of
                brevity/clarity. </para>
            <para> The network topology MUST also maximize the number of security domains traversed
                by the packets. This can be achieved by not allowing mixes from the same security
                domain to be in different layers. </para>
            <para> Requirements for the topology: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para> Should allow for non-uniform throughput of each mix (Get bandwidth
                        weights from the PKI). </para>
                </listitem>
                <listitem>
                    <para> Should maximize distribution among security domains, in this case the mix
                        descriptor specified family field would indicate the security domain or
                        entity operating the mix. </para>
                </listitem>
                <listitem>
                    <para> Other legal jurisdictional region awareness for increasing the cost of
                        compulsion attacks. </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="packet-format-overview">
        <title xml:id="packet-format-overview.title">3. Packet Format Overview</title>
        <para> For the packet format of the transported messages we use the Sphinx cryptographic
            packet format. The detailed description of the packet format, construction, processing
            and security / anonymity considerations see <link linkend="SPHINXSPEC"
            >SPHINXSPEC</link>, <quote>The Sphinx Mix Network Cryptographic Packet Format
                Specification</quote>. </para>
        <para> As the Sphinx packet format is generic, the Katzenpost Mix Network must provide a
            concrete instantiation of the format, as well as additional Sphinx per-hop routing
            information commands. </para>
        <section xml:id="sphinx-cryptographic-primitives">
            <title xml:id="sphinx-cryptographic-primitives.title">3.1 Sphinx Cryptographic
                Primitives</title>
            <para> For the current version of the Katzenpost Mix Network, let the following
                cryptographic primitives be used as described in the Sphinx specification. </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>
                        <literal>H(M)</literal> - As the output of this primitive is only used
                        locally to a Mix, any suitable primitive may be used. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>MAC(K, M)</literal> - HMAC-SHA256 <link linkend="RFC6234"
                            >RFC6234</link>, M_KEY_LENGTH of 32 bytes (256 bits), and MAC_LENGTH of
                        32 bytes (256 bits). </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>KDF(SALT, IKM)</literal> - HKDF-SHA256, HKDF-Expand only, with SALT
                        used as the info parameter. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>S(K, IV)</literal> - CTR-AES256 <link linkend="SP80038A"
                            >[SP80038A]</link>, S_KEY_LENGTH of 32 bytes (256 bits), and S_IV_LENGTH
                        of 12 bytes (96 bits), using a 32 bit counter. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>SPRP_Encrypt(K, M)/SPRP_Decrypt(K, M)</literal> - AEZv5 <link
                            linkend="AEZV5">AEZV5</link>, SPRP_KEY_LENGTH of 48 bytes (384 bits). As
                        there is a disconnect between AEZv5 as specified and the Sphinx usage, let
                        the following be the AEZv5 parameters: </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para> nonce - 16 bytes, reusing the per-hop Sphinx header IV. </para>
                        </listitem>
                        <listitem>
                            <para> additional_data - Unused. </para>
                        </listitem>
                        <listitem>
                            <para> tau - 0 bytes. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        <literal>EXP(X, Y)</literal> - X25519 <link linkend="RFC7748">RFC7748</link>
                        scalar multiply, GROUP_ELEMENT_LENGTH of 32 bytes (256 bits), G is the
                        X25519 base point. </para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="sphinx-packet-parameters">
            <title xml:id="sphinx-packet-parameters.title">3.2 Sphinx Packet Parameters</title>
            <para> The following parameters are used as for the Katzenpost Mix Network instantiation
                of the Sphinx Packet Format: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>
                        <literal>AD_SIZE</literal> - 2 bytes. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>SECURITY_PARAMETER</literal> - 32 bytes. (except for our SPRP which
                        we plan to upgrade) </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>PER_HOP_RI_SIZE</literal> - (XXX/ya: Addition is hard, let's go
                        shopping.) </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>NODE_ID_SIZE</literal> - 32 bytes, the size of the Ed25519 public
                        key, used as Node identifiers. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>RECIPIENT_ID_SIZE</literal> - 64 bytes, the maximum size of
                        local-part component in an e-mail address. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>SURB_ID_SIZE</literal> - Single Use Reply Block ID size, 16 bytes.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>MAX_HOPS</literal> - 5, the ingress provider, a set of three mixes,
                        and the egress provider. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>PAYLOAD_SIZE</literal> - (XXX/ya: Subtraction is hard, let's go
                        shopping.) </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>KDF_INFO</literal> - The byte string
                            <literal>Katzenpost-kdf-v0-hkdf-sha256</literal>. </para>
                </listitem>
            </itemizedlist>
            <para> The Sphinx Packet Header <literal>additional_data</literal> field is specified as
                follows: </para>
            <programlisting>
struct {
uint8_t version;  /* 0x00 */
uint8_t reserved; /* 0x00 */
} KatzenpostAdditionalData;
</programlisting>
            <para> Double check to ensure that this causes the rest of the packet header to be 4
                byte aligned, when wrapped in the wire protocol command and framing. This might need
                to have 3 bytes reserved instead. </para>
            <para> All nodes MUST reject Sphinx Packets that have <literal>additional_data</literal>
                that is not as specified in the header. </para>
            <para> Design decision. </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para> We can eliminate a trial decryption step per packet around the epoch
                        transitions by having a command that rewrites the AD on a per-hop basis and
                        including an epoch identifier. </para>
                </listitem>
            </itemizedlist>
            <para> I am uncertain as to if the additional complexity is worth it for a situation
                that can happen for a few minutes out of every epoch. </para>
        </section>
        <section xml:id="sphinx-per-hop-routing-information-extensions">
            <title xml:id="sphinx-per-hop-routing-information-extensions.title">3.3 Sphinx Per-hop
                Routing Information Extensions</title>
            <para> The following extensions are added to the Sphinx Per-Hop Routing Information
                commands. </para>
            <para> Let the following additional routing commands be defined in the extension
                RoutingCommandType range (<literal>0x80</literal> - <literal>0xff</literal>): </para>
            <programlisting>
enum {
mix_delay(0x80),
} KatzenpostCommandType;
</programlisting>
            <para> The mix_delay command structure is as follows: </para>
            <programlisting>
struct {
uint32_t delay_ms;
} NodeDelayCommand;
</programlisting>
        </section>
    </section>
    <section xml:id="mix-node-operation">
        <title xml:id="mix-node-operation.title">4. Mix Node Operation</title>
        <para> All Mixes behave in the following manner: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> Accept incoming connections from peers, and open persistent connections to
                    peers as needed <literal>Section 4.1 &lt;4.1&gt;</literal>. </para>
            </listitem>
            <listitem>
                <para> Periodically interact with the PKI to publish Identity and Sphinx packet
                    public keys, and to obtain information about the peers it should be
                    communicating with, along with periodically rotating the Sphinx packet keys for
                    forward secrecy <literal>Section 4.2 &lt;4.2&gt;</literal>. </para>
            </listitem>
            <listitem>
                <para> Process inbound Sphinx Packets, delay them for the specified time and forward
                    them to the appropriate Mix and or Provider <literal>Section 4.3
                        &lt;4.3&gt;</literal>. </para>
            </listitem>
        </itemizedlist>
        <para> All Nodes are identified by their link protocol signing key, for the purpose of the
            Sphinx packet source routing hop identifier. </para>
        <para> All Nodes participating in the Mix Network MUST share a common view of time, via NTP
            or similar time synchronization mechanism. </para>
        <section xml:id="link-layer-connection-management">
            <title xml:id="link-layer-connection-management.title">4.1 Link Layer Connection
                Management</title>
            <para> All communication to and from participants in the Katzenpost Mix Network is done
                via the Katzenpost Mix Network Wire Protocol <link linkend="KATZMIXWIRE"
                    >KATZMIXWIRE</link>. </para>
            <para> Nodes are responsible for establishing the connection to the next hop, for
                example, a mix in layer 0 will accept inbound connections from all Providers listed
                in the PKI, and will proactively establish connections to each mix in layer 1. </para>
            <para> Nodes MAY accept inbound connections from unknown Nodes, but MUST not relay any
                traffic until they became known via listing in the PKI document, and MUST terminate
                the connection immediately if authentication fails for any other reason. </para>
            <para> Nodes MUST impose an exponential backoff when reconnecting if a link layer
                connection gets terminated, and the minimum retry interval MUST be no shorter than 5
                seconds. </para>
            <para> Nodes MAY rate limit inbound connections as required to keep load and or resource
                use at a manageable level, but MUST be prepared to handle at least one persistent
                long lived connection per potentially eligible peer at all times. </para>
        </section>
        <section xml:id="sphinx-mix-and-provider-key-rotation">
            <title xml:id="sphinx-mix-and-provider-key-rotation.title">4.2 Sphinx Mix and Provider
                Key Rotation</title>
            <para> Each Node MUST rotate the key pair used for Sphinx packet processing periodically
                for forward secrecy reasons and to keep the list of seen packet tags short. The
                Katzenpost Mix Network uses a fixed interval (<literal>epoch</literal>), so that key
                rotations happen simultaneously throughout the network, at predictable times. </para>
            <para> Let each epoch be exactly <literal>10800 seconds (3 hours)</literal> in duration,
                and the 0th Epoch begin at <literal>2017-06-01 00:00 UTC</literal>. For more details
                see our <quote>Katzenpost Mix Network Public Key Infrastructure
                    Specification</quote> document. <link linkend="KATZMIXPKI">KATZMIXPKI</link>
            </para>
        </section>
        <section xml:id="sphinx-packet-processing">
            <title xml:id="sphinx-packet-processing.title">4.3 Sphinx Packet Processing</title>
            <para> The detailed processing of the Sphinx packet is described in the Sphinx
                specification: <quote>The Sphinx Mix Network Cryptographic Packet Format
                    Specification</quote>. Below, we present an overview of the steps which the node
                is performing upon receiving the packet: </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para> Records the time of reception. </para>
                </listitem>
                <listitem>
                    <para> Perform a <literal>Sphinx_Unwrap</literal> operation to authenticate and
                        decrypt a packet, discarding it immediately if the operation fails. </para>
                </listitem>
                <listitem>
                    <para> Apply replay detection to the packet, discarding replayed packets
                        immediately. </para>
                </listitem>
                <listitem>
                    <para> Act on the routing commands. </para>
                </listitem>
            </orderedlist>
            <para> All packets processed by Mixes MUST contain the following commands. </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>
                        <literal>NextNodeHopCommand</literal>, specifying the next Mix or Provider
                        that the packet will be forwarded to. </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>NodeDelayCommand</literal>, specifying the delay in milliseconds to
                        be applied to the packet, prior to forwarding it to the Node specified by
                        the NextNodeHopCommand, as measured from the time of reception. </para>
                </listitem>
            </itemizedlist>
            <para> Mixes MUST discard packets that have any commands other than a
                    <literal>NextNodeHopCommand</literal> or a <literal>NodeDelayCommand</literal>.
                Note that this does not apply to Providers or Clients, which have additional
                commands related to recipient and <literal>SURB (Single Use Reply Block)</literal>
                processing. </para>
            <para> Nodes MUST continue to accept the previous epoch’s key for up to 1MSL past the
                epoch transition, to tolerate latency and clock skew, and MUST start accepting the
                next epoch’s key 1MSL prior to the epoch transition where it becomes the current
                active key. </para>
            <para> Upon the final expiration of a key (1MSL past the epoch transition), Nodes MUST
                securely destroy the private component of the expired Sphinx packet processing key
                along with the backing store used to maintain replay information associated with the
                expired key. </para>
            <para> Nodes MAY discard packets at any time, for example to keep congestion and or load
                at a manageable level, however assuming the <literal>Sphinx_Unwrap</literal>
                operation was successful, the packet MUST be fed into the replay detection
                mechanism. </para>
            <para> Nodes MUST ensure that the time a packet is forwarded to the next Node is around
                the time of reception plus the delay specified in
                    <literal>NodeDelayCommand</literal>. Since exact millisecond processing is
                unpractical, implementations MAY tolerate a small window around that time for
                packets to be forwarded. That tolerance window SHOULD be kept minimal. </para>
            <para> Nodes MUST discard packets that have been delayed for significantly more time
                than specified by the <literal>NodeDelayCommand</literal>. </para>
        </section>
    </section>
    <section xml:id="anonymity-considerations">
        <title xml:id="anonymity-considerations.title">5. Anonymity Considerations</title>
        <section xml:id="topology">
            <title>5.1 Topology</title>
            <para> Layered topology is used because it offers the best level of anonymity and ease
                of analysis, while being flexible enough to scale up traffic. Whereas most mixnet
                papers discuss their security properties in the context of a cascade topology, which
                does not scale well, or a free-route network, which quickly becomes intractable to
                analyze when the network grows, while providing slightly worse anonymity than a
                layered topology. <link linkend="MIXTOPO10">MIXTOPO10</link>
            </para>
            <para> Important considerations when assigning mixes to layers, in order of decreasing
                importance, are: </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para> Security: do not allow mixes from one security domain to be in different
                        layers to maximise the number of security domains traversed by a packet
                    </para>
                </listitem>
                <listitem>
                    <para> Performance: arrange mixes in layers to maximise the capacity of the
                        layer with the lowest capacity (the bottleneck layer) </para>
                </listitem>
                <listitem>
                    <para> Security: arrange mixes in layers to maximise the number of jurisdictions
                        traversed by a packet (this is harder to do really well than it seems,
                        requires understanding of legal agreements such as MLATs). </para>
                </listitem>
            </orderedlist>
        </section>
        <section xml:id="mixing-strategy">
            <title xml:id="mixing-strategy.title">5.2 Mixing strategy</title>
            <para> As a mixing technique the Poisson mix strategy <link linkend="LOOPIX"
                    >LOOPIX</link> and <link linkend="KESDOGAN98">KESDOGAN98</link> is used, which
                REQUIRES that a packet at each hop in the route is delayed by some amount of time,
                randomly selected by the sender from an exponential distribution. This strategy
                allows to prevent the timing correlation of the incoming and outgoing traffic from
                each node. Additionally, the parameters of the distribution used for generating the
                delay can be tuned up and down depending on the amount of traffic in the network and
                the application for which the system is deployed. </para>
        </section>
    </section>
    <section xml:id="security-considerations">
        <title xml:id="security-considerations.title">6. Security Considerations</title>
        <para> The source of all authority in the mixnet system comes from the Directory Authority
            system which is also known as the mixnet PKI. This system gives the mixes and clients a
            consistent view of the network while allowing human intervention when needed. All public
            mix key material and network connection information is distributed by this Directory
            Authority system. </para>
    </section>
    <section xml:id="appendix-a.-references">
        <title>References</title>
        &AEZV5;
        &KATZMIXE2E;
        &KATZMIXPKI;
        &KATZMIXWIRE;
        &KESDOGAN98;
        &LOOPIX;
        &MIXTOPO10;
        &RFC2119;
        &RFC5246;
        &RFC6234;
        &RFC7748;
        &SP80038A;
        &SPHINXSPEC;
    </section>
</article>
