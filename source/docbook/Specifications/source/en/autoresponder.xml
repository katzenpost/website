<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?title?>
<?linkTitle "Provider-side autoresponder extension" ?>
<?url "docs/admin_guide/kaetzchen.html" ?>
<?description "" ?>
<?draft false ?>
<?slug "" ?>
<?layout "" ?>
<?type "" ?>
<?weight 38 ?>

<!DOCTYPE article [
<!ENTITY % shared-content SYSTEM "../../../shared-content.ent">
%shared-content;
<!ENTITY % terms SYSTEM "../../../terms.ent">
%terms;
<!ENTITY % references SYSTEM "../../../references.ent">
%references;
]>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1" xml:id="kaetzchen">
    <info>
        <title xml:id="kaetzchen.title">Provider-side autoresponder extension (Kaetzchen)</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Yawning</firstname>
                    <surname>Angel</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>Kali</firstname>
                    <surname>Kaneko</surname>
                </personname>
            </author>
            <author>
                <personname>
                    <firstname>David</firstname>
                    <surname>Stainton</surname>
                </personname>
            </author>
        </authorgroup>
        <abstract>
            <para> This interface is meant to provide support for various autoresponder agents
                    <quote>Kaetzchen</quote> that run on Katzenpost provider instances, thus
                bypassing the need to run a discrete client instance to provide functionality. The
                use-cases for such agents include, but are not limited to, user identity key lookup,
                a discard address, and a loop-back responder for the purpose of cover
                traffic.</para>
        </abstract>
    </info>
    <section>
        <title>Conventions Used in This Document</title>
        <para> The key words <quote>MUST</quote>, <quote>MUST NOT</quote>, <quote>REQUIRED</quote>,
                <quote>SHALL</quote>, <quote>SHALL NOT</quote>, <quote>SHOULD</quote>, <quote>SHOULD
                NOT</quote>, <quote>RECOMMENDED</quote>, <quote>MAY</quote>, and
                <quote>OPTIONAL</quote> in this document are to be interpreted as described in <link
                linkend="RFC2119">RFC2119</link>. </para>
    </section>
    
    <section xml:id="terminology">
        <title xml:id="terminology.title">Terminology</title>
        <para>The following terms are used in this specification.</para>
        <variablelist>
            &surb;
            &blocksphinxplaintext;
        </variablelist>
    </section>
    
    <section xml:id="extension-overview">
            <title xml:id="extension-overview.title">1. Extension Overview</title>
            <para>Each Kaetzchen agent will register as a potential recipient on its Provider. When
                the Provider receives a forward packet destined for a Kaetzchen instance, it will
                hand off the fully unwrapped packet along with its corresponding SURB to the agent,
                which will then act on the packet and optionally reply utilizing the SURB.</para>
        <section xml:id="agent-requirements">
            <title xml:id="agent-requirements.title">1.1 Agent Requirements</title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Each agent operation MUST be idempotent.</para>
                </listitem>
                <listitem>
                    <para>Each agent operation request and response MUST fit within one Sphinx
                        packet.</para>
                </listitem>
                <listitem>
                    <para>Each agent SHOULD register a recipient address that is prefixed with (Or
                        another standardized delimiter, agreed to by all participating providers in
                        a given mixnet).</para>
                </listitem>
                <listitem>
                    <para>Each agent SHOULD register a recipient address that consists of an RFC5322
                        dot-atom value, and MUST register recipient addresses that are at most 64
                        octets in length.</para>
                </listitem>
                <listitem>
                    <para>The first byte of the agent's response payload MUST be 0x01 to allow
                        clients to easily differentiate between SURB-ACKs and agent
                        responses.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="mix-message-formats">
            <title xml:id="mix-message-formats.title">1.2 Mix Message Formats</title>
            <para>Messages from clients to Kaetzchen use the following payload format in the forward
                Sphinx packet:</para>
            <programlisting>struct {
uint8_t flags;
uint8_t reserved; /* Set to 0x00. */
select (flags) {
case 0:
opaque padding[sizeof(SphinxSURB)];
case 1:
SphinxSURB surb;
}
opaque plaintext[];
} KaetzchenMessage;</programlisting>
            <para>The plaintext component of a <literal>KaetzchenMessage</literal> MUST be padded by
                appending <quote>0x00</quote> bytes to make the final total size of a
                    <literal>KaetzchenMessage</literal> equal to that of a
                    <literal>BlockSphinxPlaintext</literal>.</para>
            <para>Messages (replies) from the Kaetzchen to client use the following payload format
                in the SURB generated packet:</para>
            <programlisting>struct {
opaque plaintext[];
} KaetzchenReply;</programlisting>
            <para>The plaintext component of a <literal>KaetzchenReply</literal> MUST be padded by
                appending <quote>0x00</quote> bytes to make the final total size of a
                    <literal>KaetzchenReply</literal> equal to that of a
                    <literal>BlockSphinxPlaintext</literal></para>
        </section>
        </section>
        <section xml:id="pki-extensions">
            <title xml:id="pki-extensions.title">2. PKI Extensions</title>
            <para>Each provider SHOULD publish the list of publicly accessible Kaetzchen agent
                endpoints in its MixDescriptor, along with any other information required to utilize
                the agent.</para>
            <para>Provider should make this information available in the form of a map in which the
                keys are the label used to identify a given service, and the value is a map with
                arbitrary keys.</para>
            <para>Valid service names refer to the services defined in extensions to this
                specification. Every service MUST be implemented by one and only one Kaetzchen
                agent.</para>
            <para>For each service, the provider MUST advertise a field for the endpoint at which
                the Kaetzchen agent can be reached, as a key value pair where the key is
                    <literal>endpoint</literal>, and the value is the provider side endpoint
                identifier.</para>
            <programlisting>{ "kaetzchen":
{ "keyserver" : {
"endpoint": "+keyserver",
"version" : 1 } },
{ "discard" : {
"endpoint": "+discard", } },
{ "loop" : {
"endpoint": "+loopback",
"restrictedToUsers": true } },
}</programlisting>
        </section>
        <section xml:id="anonymity-considerations">
            <title xml:id="anonymity-considerations.title">3. Anonymity Considerations</title>
            <para>In the event that the mix keys for the entire return path are compromised, it is
                possible for adversaries to unwrap the SURB and determine the final recipient of the
                reply.</para>
            <para>Depending on what sort of operations a given agent implements, there may be
                additional anonymity impact that requires separate consideration.</para>
            <para>Clients MUST NOT have predictable retranmission otherwise this makes active
                confirmations attacks possible which could be used to discover the ingress Provider
                of the client.</para>
        </section>
        <section xml:id="security-considerations">
            <title xml:id="security-considerations.title">4. Security Considerations</title>
            <para>It is possible to use this mechanism to flood a victim with unwanted traffic by
                constructing a request with a SURB destined for the target.</para>
            <para>Depending on the operations implemented by each agent, the added functionality may
                end up being a vector for Denial of Service attacks in the form of CPU or network
                overload.</para>
            <para>Unless the agent implements additional encryption, message integrity and privacy
                is limited to that which is provided by the base Sphinx packet format and
                parameterization.</para>
        </section>
        <section xml:id="acknowledgments">
            <title xml:id="acknowledgments.title">Acknowledgments</title>
            <para>The inspiration for this extension comes primarily from a design by Vincent
                Breitmoser.</para>
        </section>
        <section xml:id="appendix-a.-references">
            <title xml:id="appendix-a.-references.title">References</title>
            &KATZMIXE2E;
            &KATZMIXPKI;
            &RFC2119;
            &RFC5322;
            &SPHINX09;
            &SPHINXSPEC;
        </section>

</article>