<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>

<!-- The XSL transform inserts these values as Hugo frontmatter. -->
<!-- Additionally, a "date" timestamp is inserted by the stylesheet. -->
<?title ?> 
<?linkTitle "Docker test network" ?>  <!-- Section menu link text -->
<?url "docs/admin_guide/docker.html" ?> <!-- Required to make image links work -->
<?description "" ?> <!-- Optional -->
<?draft false ?> <!-- Optional -->
<?slug "" ?> <!-- Optional -->
<?layout "" ?> <!-- Optional -->
<?type "" ?> <!-- Optional -->
<?weight 20 ?> <!-- Optional -->

<!DOCTYPE article [
    <!ENTITY % shared-content SYSTEM "../../../shared-content.ent">
    %shared-content;
]>

<article   xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" 
    xml:id="container">
    
    <info>
        <title xml:id="container.title">Using the &program_name; Docker test network</title>
    </info>
           
    <para>Katzenpost provides a ready-to-deploy Docker
            image for developers who need a non-production test environment for developing
        and testing client applications and server side plugins. By running this image on a single computer, you avoid the
        need to build and manage a complex multi-node mix net. The image can also be run using <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://podman.io/">Podman</link></para>
    <para>The test mix network includes the following components:</para>
    <itemizedlist>
        <listitem>
            <para>Three directory authority (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://katzenpost.network/docs/specs/pki/">PKI</link>) nodes</para>
        </listitem>
        <listitem>
            <para>Six <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://katzenpost.network/docs/specs/mixnet/">mix</link> nodes,
                including one node serving also as both gateway and service provider</para>
        </listitem>
        <listitem>
            <para>A ping utility, <command>run-ping</command></para>
        </listitem>
    </itemizedlist>
    
    <section xml:id="requirements">
        <info>
            <title xml:id="requirements.title">Requirements</title>
        </info>         
        
        <para>Before running the Katzenpost docker image, make sure that the
            following<?oxy_comment_start author="dwrob" timestamp="20240607T121424-0700" comment="Add minimum hardware specs?"?>
            software<?oxy_comment_end?> is installed. </para>
        <itemizedlist>
            <listitem>
                <para>A <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://debian.org">Debian GNU Linux</link> or <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://ubuntu.com">Ubuntu</link> system</para>
            </listitem>
            <listitem>
                <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://git-scm.com/">Git</link></para>
            </listitem>
            <listitem>
                <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://go.dev/">Go</link></para>
            </listitem>
            <listitem>
                <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.gnu.org/software/make/">GNU Make</link></para>
            </listitem>
            <listitem>
                <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://prometheus.io/docs/introduction/overview/">Prometheus</link></para>
            </listitem>
            <listitem>
                <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.docker.com">Docker</link>, <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://docs.docker.com/compose/">Docker Compose</link>, and
                    (optionally) <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://podman.io">Podman</link></para>
                <note>
                    <para>If both Docker and Podman are present on your system, Katzenpost uses
                        Podman. Podman is a drop-in daemonless equivalent to Docker that does not
                        require superuser privileges to run.</para>
                </note>
            </listitem>
        </itemizedlist>
        <para>On Debian, these software requirements can be installed with the following commands
            (running as superuser). <command>Apt</command> will pull in the needed
            dependencies.</para>
        <programlisting><prompt># </prompt><command>apt update</command>
<prompt># </prompt><command>apt install git golang make docker docker-compose podman</command></programlisting>       
    </section>   
    <section xml:id="install_kp">
        <info>
            <title xml:id="install_kp.title">Preparing to run the container image</title>
        </info>
        
        <para>Complete the following procedure to obtain, build, and deploy the Katzenpost test
            network. </para>
        <procedure>
            <step performance="required">
                <para>Install the Katzenpost code repository, hosted at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/katzenpost">https://github.com/katzenpost</uri>. The main Katzenpost
                    repository contains code for the server components as well as the docker image.
                    Clone the repository with the following command (your directory location may
                    vary):</para>
                <programlisting><prompt>~$ </prompt><command>git clone https://github.com/katzenpost/katzenpost.git</command></programlisting>
            </step>
            <step performance="required">
                <para>Navigate to the new <filename>katzenpost</filename> subdirectory and ensure
                    that the code is up to date.
                    <programlisting><prompt>~$ </prompt><command>cd katzenpost</command>
<prompt>~/katzenpost$ </prompt><command>git checkout main</command>
<prompt>~/katzenpost$ </prompt><command>git pull</command></programlisting></para>
            </step>
            <step performance="required">
                <para>(Optional) Create a development branch and check it
                    out.<programlisting><prompt>~/katzenpost$ </prompt><command>git checkout -b devel</command></programlisting></para>
            </step>
            <step performance="required">
                <para>(Optional) If you are using Podman, complete the following steps:</para>
                <procedure>
                    <step performance="required">
                        <para>Point the DOCKER_HOST environment variable at the Podman
                            process.</para>
                        <programlisting><prompt>$ </prompt><command>export DOCKER_HOST=unix:///var/run/user/$(id -u)/podman/podman.sock</command></programlisting>
                    </step>
                    <step performance="required">
                        <para> Set up and start the Podman server (as superuser).</para>
                        <programlisting><prompt>$ </prompt><command>podman system service -t 0 $DOCKER_HOST &amp;</command>
<prompt>$ </prompt><command>systemctl --user enable --now podman.socket</command>
                        </programlisting>
                    </step>
                </procedure>
            </step>
        </procedure>        
    </section>           
    <section xml:id="basic-ops">
        <info>
            <title xml:id="basic-ops.title">Operating the test mixnet</title>
        </info>
        
        <para>Navigate to <filename>katzenpost/docker</filename>. The <filename>Makefile</filename>
            contains target operations to create, manage, and test the self-contained Katzenpost
            container network. To invoke a target, run a command with the using the following
            pattern:</para>
        <programlisting> <prompt>~/katzenpost/docker$ </prompt><command>make<replaceable> target</replaceable></command></programlisting>
        <para>Running <command>make</command> with no target specified returns a list of available
            targets.</para>
        <table><info><title>Table 1: Makefile targets</title></info>
            
            <tgroup cols="2">
                <tbody>
                    <row>
                        <entry>
                            <para>[none]</para>
                        </entry>
                        <entry>
                            <para>Display this list of targets.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">start</emphasis></para>
                        </entry>
                        <entry>
                            <para>Run the test network in the background.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">stop</emphasis></para>
                        </entry>
                        <entry>
                            <para>Stop the test network.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">wait</emphasis></para>
                        </entry>
                        <entry>
                            <para>Wait for the test network to have consensus.</para>
                        </entry>
                    </row>
                    <row>
                        <entry><emphasis role="bold">watch</emphasis></entry>
                        <entry>
                            <para>Display live log entries until <command>Ctrl-C</command>.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">status</emphasis></para>
                        </entry>
                        <entry>
                            <para>Show test network consensus status.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">show-latest-vote</emphasis></para>
                        </entry>
                        <entry>
                            <para>Show latest consensus vote.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">run-ping</emphasis></para>
                        </entry>
                        <entry>Send a ping over the test network.</entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">clean-bin</emphasis></para>
                        </entry>
                        <entry>
                            <para>Stop all components and delete binaries.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">clean-local</emphasis></para>
                        </entry>
                        <entry>
                            <para>Stop all components, delete binaries, and delete data.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">clean-local-dryrun</emphasis></para>
                        </entry>
                        <entry>
                            <para>Show what clean-local would delete.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para><emphasis role="bold">clean</emphasis></para>
                        </entry>
                        <entry>
                            <para>Same as <emphasis role="bold">clean-local</emphasis>, but also
                                deletes <code>go_deps</code> image.</para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <section xml:id="start-mixnet">
            <info>
                <title xml:id="start-mixnet.title">Starting and monitoring the mixnet</title>
            </info>
            
            <para>The first time that you run <command>make start</command>, the Docker image is
                downloaded, built, installed, and started. This takes several minutes. When the
                build is complete, the command exits while the network remains running in the
                background.</para>
            <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make start</command></programlisting>
            <para>Subsequent runs of <command>make start</command> either start or restart the
                network without building the components from scratch. The exception to this is when
                you delete any of the Katzenpost binaries (dirauth.alpine, server.alpine, etc.).
                In that case, <command>make start</command> rebuilds just the parts of the network
                dependent on the deleted binary. For more information about the files created during
                the Docker build, see <xref linkend="topology"/>.</para>
            <para/>
            <note>
                <para>When running <command>make start</command> , be aware of the following
                    considerations:</para>
                <itemizedlist>
                    <listitem>
                        <para>If you intend to use Docker, you need to run <command>make</command>
                            as superuser. If you are using <command>sudo</command> to elevate your
                            privileges, you need to edit
                                <filename>katzenpost/docker/Makefile</filename> to prepend
                                <command>sudo</command> to each command contained in it.</para>
                    </listitem>
                    <listitem>
                        <para>If you have Podman installed on your system and you nonetheless want
                            to run Docker, you can override the default behavior by adding the
                            argument <command>docker=docker</command> to the command as in the
                            following:<programlisting><prompt>~/katzenpost/docker$ </prompt><command>make run docker=docker</command> </programlisting></para>
                    </listitem>
                </itemizedlist>
            </note>
            <para>After the <command>make start</command> command exits, the mixnet runs in the
                background, and you can run <command>make watch</command> to display a live log of
                the network activity.</para>
            <para>
                <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make watch</command>
    ...
    &lt;output&gt;
    ...</programlisting>
            </para>
            <para>When installation is complete, the mix servers vote and reach a consensus. You can
                use the <command>wait</command> target to wait for the mixnet to get consensus and
                be ready to use. This can also take several minutes:</para>
            <para>
                <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make wait</command>
    ...
    &lt;output&gt;
    ...</programlisting>
            </para>
            <para>You can confirm that installation and configuration are complete by issuing the
                    <command>status</command> command from the same or another terminal. When the
                network is ready for use, <command>status</command> begins returning consensus
                information similar to the following:</para>
            <para>
                <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make status</command>
    ...
    00:15:15.003 NOTI state: Consensus made for epoch 1851128 with 3/3 signatures: &amp;{Epoch: 1851128 GenesisEpoch: 1851118
    ...</programlisting>
            </para>
        </section>
        <section xml:id="test-mixnet">
            <info>
                <title xml:id="test-mixnet.title">Testing the mixnet</title>
            </info>
            
            <para>At this point, you should have a locally running mix network. You can test whether
                it is working correctly by using <command>run-ping</command>, which launches a
                packet into the network and watches for a successful reply. Run the following
                command:<programlisting><prompt>~/katzenpost/docker$ </prompt><command>make run-ping</command></programlisting></para>
            <para>If the network is functioning properly, the resulting output contains lines
                similar to the following:</para>
            <programlisting>19:29:53.541 INFO gateway1_client: sending loop decoy
    !19:29:54.108 INFO gateway1_client: sending loop decoy
    19:29:54.632 INFO gateway1_client: sending loop decoy
    19:29:55.160 INFO gateway1_client: sending loop decoy
    !19:29:56.071 INFO gateway1_client: sending loop decoy
    !19:29:59.173 INFO gateway1_client: sending loop decoy
    !Success rate is 100.000000 percent 10/10)</programlisting>
            <para>lf <command>run-ping</command> fails to receive a reply, it eventually times out
                with an error message. If this happens, try the command again. </para>
            <note>
                <para>If you attempt use <emphasis role="bold">run-ping</emphasis> too quickly after
                    starting the mixnet, and consensus has not been reached, the utility may crash
                    with an error message or hang indefinitely. If this happens, issue (if
                    necessary) a <command>Ctrl-C</command> key sequence to abort, check the
                    consensus status with the <command>status</command> command, and then retry
                        <command>run-ping</command>.</para>
            </note>
        </section>
        <section xml:id="shutdown-mixnet">
            <info>
                <title xml:id="shutdown-mixnet.title">Shutting down the mixnet</title>
            </info>
            
            <para>The mix network continues to run in the terminal where you started it until you
                issue a <command>Ctrl-C</command> key sequence, or until you issue the following
                command in another terminal:</para>
            <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make stop</command></programlisting>
            <para>When you stop the network, the binaries and data are left in place. This allows
                for a quick restart.</para>
        </section>
        <section xml:id="uninstall-mixnet">
            <info>
                <title xml:id="uninstall-mixnet.title">Uninstalling and cleaning up</title>
            </info>
            
            <para>Several command targets can be used to uninstall the Docker image and restore your
                system to a clean state. The following examples demonstrate the commands and their
                output.</para>
            <itemizedlist>
                <listitem>
                    <para><command>clean-bin</command></para>
                    <para>To stop the network and delete the compiled binaries, run the following
                        command:</para>
                    <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make clean-bin</command>
    
    [ -e voting_mixnet ] &amp;&amp; cd voting_mixnet &amp;&amp; DOCKER_HOST=unix:///run/user/1000/podman/podman.sock docker-compose down --remove-orphans; rm -fv running.stamp
    Stopping voting_mixnet_auth3_1        ... done
    Stopping voting_mixnet_servicenode1_1 ... done
    Stopping voting_mixnet_metrics_1      ... done
    Stopping voting_mixnet_mix3_1         ... done
    Stopping voting_mixnet_auth2_1        ... done
    Stopping voting_mixnet_mix2_1         ... done
    Stopping voting_mixnet_gateway1_1     ... done
    Stopping voting_mixnet_auth1_1        ... done
    Stopping voting_mixnet_mix1_1         ... done
    Removing voting_mixnet_auth3_1        ... done
    Removing voting_mixnet_servicenode1_1 ... done
    Removing voting_mixnet_metrics_1      ... done
    Removing voting_mixnet_mix3_1         ... done
    Removing voting_mixnet_auth2_1        ... done
    Removing voting_mixnet_mix2_1         ... done
    Removing voting_mixnet_gateway1_1     ... done
    Removing voting_mixnet_auth1_1        ... done
    Removing voting_mixnet_mix1_1         ... done
    removed 'running.stamp'
    rm -vf ./voting_mixnet/*.alpine
    removed './voting_mixnet/echo_server.alpine'
    removed './voting_mixnet/fetch.alpine'
    removed './voting_mixnet/memspool.alpine'
    removed './voting_mixnet/panda_server.alpine'
    removed './voting_mixnet/pigeonhole.alpine'
    removed './voting_mixnet/ping.alpine'
    removed './voting_mixnet/reunion_katzenpost_server.alpine'
    removed './voting_mixnet/server.alpine'
    removed './voting_mixnet/voting.alpine'</programlisting>
                    <para>This command leaves in place the cryptographic keys, the state data, and
                        the logs.</para>
                </listitem>
                <listitem>
                    <para><command>clean-local-dryrun</command></para>
                    <para>To diplay a preview of what <command>clean-local</command> would remove,
                        without actually deleting anything, run the following command:</para>
                    <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make clean-local-dryrun</command></programlisting>
                </listitem>
                <listitem>
                    <para><command>clean-local</command></para>
                    <para>To delete both compiled binaries and data, run the following
                        command:</para>
                    <programlisting><prompt>~/katzenpost/docker$ </prompt><command>make clean-local</command>
                        
    [ -e voting_mixnet ] &amp;&amp; cd voting_mixnet &amp;&amp; DOCKER_HOST=unix:///run/user/1000/podman/podman.sock docker-compose down --remove-orphans; rm -fv running.stamp
    Removing voting_mixnet_mix2_1         ... done
    Removing voting_mixnet_auth1_1        ... done
    Removing voting_mixnet_auth2_1        ... done
    Removing voting_mixnet_gateway1_1     ... done
    Removing voting_mixnet_mix1_1         ... done
    Removing voting_mixnet_auth3_1        ... done
    Removing voting_mixnet_mix3_1         ... done
    Removing voting_mixnet_servicenode1_1 ... done
    Removing voting_mixnet_metrics_1      ... done
    removed 'running.stamp'
    rm -vf ./voting_mixnet/*.alpine
    removed './voting_mixnet/echo_server.alpine'
    removed './voting_mixnet/fetch.alpine'
    removed './voting_mixnet/memspool.alpine'
    removed './voting_mixnet/panda_server.alpine'
    removed './voting_mixnet/pigeonhole.alpine'
    removed './voting_mixnet/reunion_katzenpost_server.alpine'
    removed './voting_mixnet/server.alpine'
    removed './voting_mixnet/voting.alpine'
    git clean -f -x voting_mixnet
    Removing voting_mixnet/
    git status .
    On branch main
    Your branch is up to date with 'origin/main'.</programlisting>
                </listitem>
                <listitem>
                    <para><command>clean</command></para>
                    <para>To stop the the network and delete the binaries, the data, and the go_deps
                        image, run the following command as superuser: </para>
                    <programlisting><prompt>~/katzenpost/docker$ </prompt><command>sudo make clean</command></programlisting>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="topology">
        <info>
            <title xml:id="topology.title">Network topology and components</title>
        </info>
        
        <para>The Docker image deploys a working mixnet with all components and component groups
            needed to perform essential mixnet functions: </para>
        <itemizedlist>
            <listitem>
                <para>message mixing (including packet reordering, timing randomization, injection
                    of decoy traffic, obfuscation of senders and receivers, and so on)</para>
            </listitem>
            <listitem>
                <para>service provisioning</para>
            </listitem>
            <listitem>
                <para>internal authentication and integrity monitoring</para>
            </listitem>
            <listitem>
                <para>interfacing with external clients</para>
            </listitem>
        </itemizedlist>
        <warning>
            <para>While suited for client development and testing, the test mixnet omits performance
                and security redundancies. <emphasis>Do not use it in production.</emphasis></para>
        </warning>
        <para>The following diagram illustrates the components and their network interactions. The
            gray blocks represent nodes, and the arrows represent information transfer. </para>
        <figure><info><title>Test network topology</title></info>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="pix/katzenpost-docker.png" scale="100"/>
                </imageobject>               
             </mediaobject>
            
        </figure>
        <para>On the left, the <emphasis role="bold">Client</emphasis> transmits a message (shown by
            purple arrows) through the <emphasis role="bold">Gateway node</emphasis>, across three
                <emphasis role="bold">mix node</emphasis> layers, to the <emphasis role="bold">Service node</emphasis>. The <emphasis role="bold">Service node</emphasis>
            processes the request and responds with a reply (shown by the green arrows) that
            traverses the <emphasis role="bold">mix node</emphasis> layers before exiting the mixnet
            via the <emphasis role="bold">Gateway node</emphasis> and arriving at the <emphasis role="bold">Client</emphasis>.</para>
        <para>On the right, directory authorities <emphasis role="bold">Dirauth 1</emphasis>,
                <emphasis role="bold">Dirauth 2</emphasis>, and <emphasis role="bold">Dirauth
                3</emphasis> provide PKI services. The directory authorities receive <emphasis role="bold">mix descriptors</emphasis> from the other nodes, collate these into a
                <emphasis role="bold">consensus document</emphasis> containing validated network
            status and authentication materials , and make that available to the other nodes. </para>
        <para>The elements in the topology diagram map to the mixnet's component nodes as shown in
            the following table. Note that all nodes share the same IP address (127.0.0.1, i.e.,
            localhost), but are accessed through different ports. Each node type links to additional
            information in <link xlink:href="&baseURL;docs/admin_guide/components.html"
                >Components and configuration of the &program_name; mixnet</link><!--<xref linkend="components" endterm="components.title"/>-->.</para>
        <table frame="all"><info><title>Table 2: Test mixnet hosts</title></info>            
            <tgroup cols="5">
                <colspec colname="c1" colnum="1" colwidth="1*"/>
                <colspec colname="c2" colnum="2" colwidth="1*"/>
                <colspec colname="newCol3" colnum="3" colwidth="1*"/>
                <colspec colname="c3" colnum="4" colwidth="1*"/>
                <colspec colname="c4" colnum="5" colwidth="1*"/>
                <thead>
                    <row>
                        <entry>Node type</entry>
                        <entry>Docker ID</entry>
                        <entry>Diagram label</entry>
                        <entry>IP address</entry>
                        <entry>TCP port</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry morerows="2">
                            <para><link xlink:href="&baseURL;docs/admin_guide/intro-dirauth.html"
                                    >Directory authority</link><!--<link linkend="intro-dirauth">Directory authority</link>--></para>
                        </entry>
                        <entry>auth1</entry>
                        <entry>Dirauth1</entry>
                        <entry morerows="7"><para>127.0.0.1 (localhost)</para></entry>
                        <entry><para>30001</para></entry>
                    </row>
                    <row>
                        <entry><para>auth2</para></entry>
                        <entry>Dirauth 2</entry>
                        <entry><para>30002</para></entry>
                    </row>
                    <row>
                        <entry><para>auth3</para></entry>
                        <entry>Dirauth 3</entry>
                        <entry><para>30003</para></entry>
                    </row>
                    <row>
                        <entry><link xlink:href="&baseURL;docs/admin_guide/intro-gateway.html"
                                >Gateway node</link><!--<link linkend="intro-gateway">Gateway node</link>--></entry>
                        <entry>gateway1</entry>
                        <entry>Gateway node</entry>
                        <entry>30004</entry>
                    </row>
                    <row>
                        <entry>
                            <para><link xlink:href="&baseURL;docs/admin_guide/intro-service.html"
                                    >Service node</link><!--<link linkend="intro-service">Service node</link>--></para>
                        </entry>
                        <entry><para>servicenode1</para></entry>
                        <entry>Service node</entry>
                        <entry><para>30006 </para></entry>
                    </row>
                    <row>
                        <entry morerows="2">
                            <para><link xlink:href="&baseURL;docs/admin_guide/intro-mix.html"
                                    >Mix node</link><!--<link linkend="intro-mix">Mix node</link>--></para>
                        </entry>
                        <entry><para>mix1</para></entry>
                        <entry>Layer 1 mix node</entry>
                        <entry><para>30008</para></entry>
                    </row>
                    <row>
                        <entry><para>mix2</para></entry>
                        <entry>Layer 2 mix node</entry>
                        <entry><para>30010</para></entry>
                    </row>
                    <row>
                        <entry><para>mix3</para></entry>
                        <entry>Layer 3 mix node</entry>
                        <entry><para>30012</para></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <section>
            <info>
                <title>The Docker file tree</title>
            </info>
            
            <para>The following <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://manpages.debian.org/bookworm/tree/tree.1.en.html">tree</link>
                output shows the location, relative to the <filename>katzenpost</filename>
                repository root, of the files created by the Docker build. During testing and use,
                you would normally touch only the TOML configuration file associated with each node,
                as highlighted in the listing. For help in understanding these files and a complete
                list of configuration options, follow the links in <guilabel>Table 2: Test mixnet
                    hosts</guilabel>.</para>


        <programlisting>katzenpost/docker/voting_mixnet/
|---<emphasis role="bold">auth1</emphasis>
|   |---<emphasis role="bold">authority.toml</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---link.private.pem
|   |---link.public.pem
|   |---persistence.db
|---<emphasis role="bold">auth2</emphasis>
|   |---<emphasis role="bold">authority.toml</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---link.private.pem
|   |---link.public.pem
|   |---persistence.db
|---<emphasis role="bold">auth3</emphasis>
|   |---<emphasis role="bold">authority.toml</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---link.private.pem
|   |---link.public.pem
|   |---persistence.db
|---client
|   |---client.toml
|---client2
|   |---client.toml
|---dirauth.alpine
|---docker-compose.yml
|---echo_server.alpine
|---fetch.alpine
|---<emphasis role="bold">gateway1</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---<emphasis role="bold">katzenpost.toml</emphasis>
|   |---link.private.pem
|   |---link.public.pem
|   |---management_sock
|   |---spool.db
|   |---users.db
|---memspool.alpine
|---<emphasis role="bold">mix1</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---<emphasis role="bold">katzenpost.toml</emphasis>
|   |---link.private.pem
|   |---link.public.pem
|---<emphasis role="bold">mix2</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---<emphasis role="bold">katzenpost.toml</emphasis>
|   |---link.private.pem
|   |---link.public.pem
|---<emphasis role="bold">mix3</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---<emphasis role="bold">katzenpost.toml</emphasis>
|   |---link.private.pem
|   |---link.public.pem
|---panda_server.alpine
|---pigeonhole.alpine
|---ping.alpine
|---prometheus.yml
|---proxy_client.alpine
|---proxy_server.alpine
|---running.stamp
|---server.alpine
|---<emphasis role="bold">servicenode1</emphasis>
|   |---identity.private.pem
|   |---identity.public.pem
|   |---katzenpost.log
|   |---<emphasis role="bold">katzenpost.toml</emphasis>
|   |---link.private.pem
|   |---link.public.pem
|   |---management_sock
|   |---map.storage
|   |---memspool.13.log
|   |---memspool.storage
|   |---panda.25.log
|   |---panda.storage
|   |---pigeonHole.19.log
|   |---proxy.31.log
|---voting_mixnet</programlisting>
        <para>Examples of complete TOML configuration files are provided in <link xlink:href="&baseURL;docs/admin_guide/docker-config.html"
                >Appendix: Configuration files from the Docker test mixnet</link><!--<xref linkend="docker-config" endterm="docker-config.title"/>-->.</para>
        </section>
    </section>
</article>
